<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>AMI - 标签 - 张昭的Blog</title>
        <link>http://gitzhangzhao.github.io/tags/ami/</link>
        <description>AMI - 标签 - 张昭的Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>gitzhangzhao@gmail.com (张昭)</managingEditor>
            <webMaster>gitzhangzhao@gmail.com (张昭)</webMaster><lastBuildDate>Tue, 29 Aug 2023 16:37:13 &#43;0800</lastBuildDate><atom:link href="http://gitzhangzhao.github.io/tags/ami/" rel="self" type="application/rss+xml" /><item>
    <title>UEFI BDS 阶段代码梳理</title>
    <link>http://gitzhangzhao.github.io/posts/bios/bds/</link>
    <pubDate>Tue, 29 Aug 2023 16:37:13 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/bios/bds/</guid>
    <description><![CDATA[<h3 id="dxe-install-bds-protocol">DXE Install BDS Protocol</h3>
<ol>
<li>在DXE阶段的Main中，调用<code>CoreDispatcher() -&gt; CoreStartImage()</code>，进入各DXE driver的入口函数:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Image</span><span class="o">-&gt;</span><span class="n">Status</span> <span class="o">=</span> <span class="n">Image</span><span class="o">-&gt;</span><span class="nf">EntryPoint</span> <span class="p">(</span><span class="n">ImageHandle</span><span class="p">,</span> <span class="n">Image</span><span class="o">-&gt;</span><span class="n">Info</span><span class="p">.</span><span class="n">SystemTable</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此阶段会load并执行各DXE的驱动程序，而BDS就属于DXE的一个驱动，所以<code>BdsInitialize()</code>这个函数会在此时被执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">Defines</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">INF_VERSION</span>                    <span class="o">=</span> <span class="mh">0x00010005</span>
</span></span><span class="line"><span class="cl"><span class="n">BASE_NAME</span>                      <span class="o">=</span> <span class="n">BdsDxe</span>
</span></span><span class="line"><span class="cl"><span class="n">MODULE_UNI_FILE</span>                <span class="o">=</span> <span class="n">BdsDxe</span><span class="p">.</span><span class="n">uni</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE_GUID</span>                      <span class="o">=</span> <span class="mi">6</span><span class="n">D33944A</span><span class="o">-</span><span class="n">EC75</span><span class="o">-</span><span class="mi">4855</span><span class="o">-</span><span class="n">A54D</span><span class="o">-</span><span class="mi">809</span><span class="n">C75241F6C</span>
</span></span><span class="line"><span class="cl"><span class="n">MODULE_TYPE</span>                    <span class="o">=</span> <span class="n">DXE_DRIVER</span>                            <span class="c1">// BDS是DXE驱动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">VERSION_STRING</span>                 <span class="o">=</span> <span class="mf">1.0</span>
</span></span><span class="line"><span class="cl"><span class="n">ENTRY_POINT</span>                    <span class="o">=</span> <span class="n">BdsInitialize</span>                         <span class="c1">// 驱动入口函数
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>入口函数<code>BdsInitialize()</code>调用<code>InstallMultipleProtocolInterfaces()</code>注册BdsArchProtocol到DXE Core，该Protocol的Guid为<code>gEfiBdsArchProtocolGuid</code>，<code>*gBds</code>是一个指向BdsArchProtocol的指针，在<code>MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c</code>开始时定义：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// `MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">EFI_BDS_ARCH_PROTOCOL</span>             <span class="o">*</span><span class="n">gBds</span>           <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>BdsEntry.c</code>中BDS初始化阶段<code>BdsInitialize</code>，<code>*gBds</code>指针作为<code>InstallMultipleProtocolInterfaces()</code>的参数，来将入口函数<code>BdsEntry</code>注册到<code>PROTOCOL_INTERFACE</code>中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Universal/BdsDxe/BdsEntry.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">EFI_BDS_ARCH_PROTOCOL</span>  <span class="n">gBds</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="n">BdsEntry</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Universal/BdsDxe/BdsEntry.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Install protocol interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Status</span> <span class="o">=</span> <span class="n">gBS</span><span class="o">-&gt;</span><span class="nf">InstallMultipleProtocolInterfaces</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">&amp;</span><span class="n">Handle</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="o">&amp;</span><span class="n">gEfiBdsArchProtocolGuid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="o">&amp;</span><span class="n">gBds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nb">NULL</span>
</span></span><span class="line"><span class="cl">                <span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是：在<code>BdsEntry.c</code>中的<code>gBds</code>只是为了注册，而在<code>DxeMain()</code>最后进入Bds阶段使用的指针是在别的地方赋值的。Dxe中有如下结构体：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">EFI_CORE_PROTOCOL_NOTIFY_ENTRY</span>  <span class="n">mArchProtocols</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiSecurityArchProtocolGuid</span><span class="p">,</span>         <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gSecurity</span><span class="p">,</span>      <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiCpuArchProtocolGuid</span><span class="p">,</span>              <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gCpu</span><span class="p">,</span>           <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiMetronomeArchProtocolGuid</span><span class="p">,</span>        <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gMetronome</span><span class="p">,</span>     <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiTimerArchProtocolGuid</span><span class="p">,</span>            <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gTimer</span><span class="p">,</span>         <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiBdsArchProtocolGuid</span><span class="p">,</span>              <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gBds</span><span class="p">,</span>           <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>首先通过这个数组将<code>*gBds</code>和<code>gEfiBdsArchProtocolGuid</code>建立起联系，然后在Dxe阶段的Main函数中，通过<code>CoreNotifyOnProtocolInstallation()-&gt;CoreNotifyOnProtocolEntryTable()</code>创建事件(Event)，这里传入的Entry为<code>mArchProtocols</code>，最终由<code>GenericProtocolNotify()</code>函数给<code>mArchProtocols</code>的每一个成员赋值。这里，<code>CoreCreatEvent()</code>和<code>CoreRegisterProtocolNotify</code>成对出现，一旦Protocol安装则执行回调函数<code>GenericProtocolNotify()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">Creates an event for each entry in a table that is fired everytime a Protocol
</span></span></span><span class="line"><span class="cl"><span class="cm">of a specific type is installed.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">@param Entry  Pointer to EFI_CORE_PROTOCOL_NOTIFY_ENTRY.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">**/</span>
</span></span><span class="line"><span class="cl"><span class="n">VOID</span>
</span></span><span class="line"><span class="cl"><span class="nf">CoreNotifyOnProtocolEntryTable</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_CORE_PROTOCOL_NOTIFY_ENTRY</span>  <span class="o">*</span><span class="n">Entry</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_STATUS</span>  <span class="n">Status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">ProtocolGuid</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">Entry</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Create the event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Status</span> <span class="o">=</span> <span class="nf">CoreCreateEvent</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">             <span class="n">EVT_NOTIFY_SIGNAL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">TPL_CALLBACK</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">GenericProtocolNotify</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">Entry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="o">&amp;</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Event</span>
</span></span><span class="line"><span class="cl">             <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">ASSERT_EFI_ERROR</span> <span class="p">(</span><span class="n">Status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Register for protocol notifactions on this event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Status</span> <span class="o">=</span> <span class="nf">CoreRegisterProtocolNotify</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">             <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">ProtocolGuid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Event</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="o">&amp;</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Registration</span>
</span></span><span class="line"><span class="cl">             <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">ASSERT_EFI_ERROR</span> <span class="p">(</span><span class="n">Status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在回调函数<code>GenericProtocolNotify</code>中，Bds入口函数<code>BdsEntry()</code>被locate，然后被赋值给<code>*gBds</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// See if the expected protocol is present in the handle database
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Status</span> <span class="o">=</span> <span class="nf">CoreLocateProtocol</span> <span class="p">(</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">ProtocolGuid</span><span class="p">,</span> <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Registration</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Protocol</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">EFI_ERROR</span> <span class="p">(</span><span class="n">Status</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Mark the protocol as present
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Present</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Update protocol global variable if one exists. Entry-&gt;Protocol points to a global variable
</span></span></span><span class="line"><span class="cl"><span class="c1">// if one exists in the DXE core for this Architectural Protocol
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Protocol</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="p">(</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Protocol</span><span class="p">)</span> <span class="o">=</span> <span class="n">Protocol</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，在Bds的入口函数已经被安装后，<code>DxeMain()</code>的最后通过<code>*gBds</code>指针进入Bds的入口<code>BdsEntry()</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">gBds</span><span class="o">-&gt;</span><span class="nf">Entry</span> <span class="p">(</span><span class="n">gBds</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再讨论一下BDS的Protocol，<code>EFI_BDS_ARCH_PROTOCOL</code>是在<code>Bds.h</code>中定义的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdePkg/Include/Bds.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_EFI_BDS_ARCH_PROTOCOL</span> <span class="n">EFI_BDS_ARCH_PROTOCOL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span>
</span></span><span class="line"><span class="cl"><span class="nf">VOID</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">EFIAPI</span> <span class="o">*</span><span class="n">EFI_BDS_ENTRY</span><span class="p">)(</span>
</span></span><span class="line"><span class="cl">  <span class="n">IN</span> <span class="n">EFI_BDS_ARCH_PROTOCOL</span>  <span class="o">*</span><span class="n">This</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">_EFI_BDS_ARCH_PROTOCOL</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_BDS_ENTRY</span>    <span class="n">Entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中，<code>EFI_BDS_ENTRY </code>就是这个protocol的一个服务，对应了一个<code>PROTOCOL_INTERFACE</code>。在之前的<code>InstallMultipleProtocolInterfaces()</code>函数中，<code>Entry</code>函数被指向<code>EFI_BDS_ARCH_PROTOCOL</code>这个Protocol的例化<code>PROTOCOL_INTERFACE</code>中的<code>*Interface</code>指针。所以根据Bds的Guid <code>EFI_BDS_ARCH_PROTOCOL_GUID</code>可以找到<code>EFI_BDS_ARCH_PROTOCOL</code>这个Protocol，再根据这个Protocol找到<code>PROTOCOL_INTERFACE</code>实现，就可以找到具体的被注册的<code>BdsEntry()</code>函数了</p>
]]></description>
</item>
</channel>
</rss>
