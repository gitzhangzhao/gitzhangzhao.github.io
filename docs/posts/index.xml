<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - 张昭的Blog</title>
        <link>http://gitzhangzhao.github.io/posts/</link>
        <description>所有文章 | 张昭的Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>gitzhangzhao@gmail.com (张昭)</managingEditor>
            <webMaster>gitzhangzhao@gmail.com (张昭)</webMaster><lastBuildDate>Fri, 01 Sep 2023 14:38:28 &#43;0800</lastBuildDate><atom:link href="http://gitzhangzhao.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>对 C 语言中 extern 的理解</title>
    <link>http://gitzhangzhao.github.io/posts/c/extern/</link>
    <pubDate>Fri, 01 Sep 2023 14:38:28 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/c/extern/</guid>
    <description><![CDATA[<p><strong>extern 告诉编译器，变量 i 是在程序中的其他位置定义的（很可能是在不同的源文件中），因此不需要为 i 分配空间</strong></p>
<p>一个全局变量可以声明多次，但只能定义一次。只要在任意一个文件中只定义一次就可以了，其他文件中如果要使用需要先用 extern 声明。如果其他文件中没有使用 extern 声明，则会报重复定义的错误</p>
<p><strong>注意</strong>：<code>extern int a</code>是声明而<code>extern int a = 0</code>是定义，要分清楚</p>
<p>在多文件的工程中，有如下几种用法（假设 A 包含源文件和头文件，B 和 C 包含源文件，B 和 C 要使用 A 中定义的变量 a）：</p>
<h4 id="a-的源文件中定义b-和-c-的源文件中使用前先-extern此时可以没有头文件">A 的源文件中定义，B 和 C 的源文件中使用前先 extern，此时可以没有头文件</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// A.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="cm">/* 可以赋值也可以不赋值 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B.c &amp; C.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>  <span class="cm">/* 不可以直接 extern int a = 1，这相当于重复定义 */</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="a-的源文件中定义头文件中声明b-和-c-通过包含-a-的头文件使用">A 的源文件中定义，头文件中声明，B 和 C 通过包含 A 的头文件使用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// A.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="cm">/* 可以赋值也可以不赋值 */</span>
</span></span><span class="line"><span class="cl"><span class="c1">// A.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>  <span class="cm">/* 不推荐直接在头文件中进行定义 extern int a = 0，别的文件包含后会重复定义 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B.c &amp; C.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;A.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="a-的源文件中未定义只声明在-b-和-c-任意中定义">A 的源文件中未定义只声明，在 B 和 C 任意中定义</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// A.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>        <span class="cm">/* A 中声明 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>           <span class="cm">/* B 中定义 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// C.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="cm">/* C 中声明 */</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总之，C 语言的全局变量是所有文件均可见的，extern 只是告诉了编译器这个变量不是在该文件中定义的。在整个工程中，一个全局变量只能被定义一次，被声明和使用无数次。在非全局作用域下，可以定义同名的变量，这就涉及到作用域的问题</p>
]]></description>
</item>
<item>
    <title>UEFI BDS 阶段代码梳理</title>
    <link>http://gitzhangzhao.github.io/posts/bios/bds/</link>
    <pubDate>Tue, 29 Aug 2023 16:37:13 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/bios/bds/</guid>
    <description><![CDATA[<h3 id="dxe-install-bds-protocol">DXE Install BDS Protocol</h3>
<ol>
<li>在DXE阶段的Main中，调用<code>CoreDispatcher() -&gt; CoreStartImage()</code>，进入各DXE driver的入口函数:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">Image</span><span class="o">-&gt;</span><span class="n">Status</span> <span class="o">=</span> <span class="n">Image</span><span class="o">-&gt;</span><span class="nf">EntryPoint</span> <span class="p">(</span><span class="n">ImageHandle</span><span class="p">,</span> <span class="n">Image</span><span class="o">-&gt;</span><span class="n">Info</span><span class="p">.</span><span class="n">SystemTable</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此阶段会load并执行各DXE的驱动程序，而BDS就属于DXE的一个驱动，所以<code>BdsInitialize()</code>这个函数会在此时被执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Universal/BdsDxe/BdsDxe.inf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="n">Defines</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">INF_VERSION</span>                    <span class="o">=</span> <span class="mh">0x00010005</span>
</span></span><span class="line"><span class="cl"><span class="n">BASE_NAME</span>                      <span class="o">=</span> <span class="n">BdsDxe</span>
</span></span><span class="line"><span class="cl"><span class="n">MODULE_UNI_FILE</span>                <span class="o">=</span> <span class="n">BdsDxe</span><span class="p">.</span><span class="n">uni</span>
</span></span><span class="line"><span class="cl"><span class="n">FILE_GUID</span>                      <span class="o">=</span> <span class="mi">6</span><span class="n">D33944A</span><span class="o">-</span><span class="n">EC75</span><span class="o">-</span><span class="mi">4855</span><span class="o">-</span><span class="n">A54D</span><span class="o">-</span><span class="mi">809</span><span class="n">C75241F6C</span>
</span></span><span class="line"><span class="cl"><span class="n">MODULE_TYPE</span>                    <span class="o">=</span> <span class="n">DXE_DRIVER</span>                            <span class="c1">// BDS是DXE驱动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">VERSION_STRING</span>                 <span class="o">=</span> <span class="mf">1.0</span>
</span></span><span class="line"><span class="cl"><span class="n">ENTRY_POINT</span>                    <span class="o">=</span> <span class="n">BdsInitialize</span>                         <span class="c1">// 驱动入口函数
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>入口函数<code>BdsInitialize()</code>调用<code>InstallMultipleProtocolInterfaces()</code>注册BdsArchProtocol到DXE Core，该Protocol的Guid为<code>gEfiBdsArchProtocolGuid</code>，<code>*gBds</code>是一个指向BdsArchProtocol的指针，在<code>MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c</code>开始时定义：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// `MdeModulePkg/Core/Dxe/DxeMain/DxeMain.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">EFI_BDS_ARCH_PROTOCOL</span>             <span class="o">*</span><span class="n">gBds</span>           <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>BdsEntry.c</code>中BDS初始化阶段<code>BdsInitialize</code>，<code>*gBds</code>指针作为<code>InstallMultipleProtocolInterfaces()</code>的参数，来将入口函数<code>BdsEntry</code>注册到<code>PROTOCOL_INTERFACE</code>中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Universal/BdsDxe/BdsEntry.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">EFI_BDS_ARCH_PROTOCOL</span>  <span class="n">gBds</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="n">BdsEntry</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Universal/BdsDxe/BdsEntry.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Install protocol interface
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Handle</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Status</span> <span class="o">=</span> <span class="n">gBS</span><span class="o">-&gt;</span><span class="nf">InstallMultipleProtocolInterfaces</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="o">&amp;</span><span class="n">Handle</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="o">&amp;</span><span class="n">gEfiBdsArchProtocolGuid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="o">&amp;</span><span class="n">gBds</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nb">NULL</span>
</span></span><span class="line"><span class="cl">                <span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>需要注意的是：在<code>BdsEntry.c</code>中的<code>gBds</code>只是为了注册，而在<code>DxeMain()</code>最后进入Bds阶段使用的指针是在别的地方赋值的。Dxe中有如下结构体：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">EFI_CORE_PROTOCOL_NOTIFY_ENTRY</span>  <span class="n">mArchProtocols</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiSecurityArchProtocolGuid</span><span class="p">,</span>         <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gSecurity</span><span class="p">,</span>      <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiCpuArchProtocolGuid</span><span class="p">,</span>              <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gCpu</span><span class="p">,</span>           <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiMetronomeArchProtocolGuid</span><span class="p">,</span>        <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gMetronome</span><span class="p">,</span>     <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiTimerArchProtocolGuid</span><span class="p">,</span>            <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gTimer</span><span class="p">,</span>         <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span> <span class="o">&amp;</span><span class="n">gEfiBdsArchProtocolGuid</span><span class="p">,</span>              <span class="p">(</span><span class="n">VOID</span> <span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">gBds</span><span class="p">,</span>           <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">  <span class="p">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>首先通过这个数组将<code>*gBds</code>和<code>gEfiBdsArchProtocolGuid</code>建立起联系，然后在Dxe阶段的Main函数中，通过<code>CoreNotifyOnProtocolInstallation()-&gt;CoreNotifyOnProtocolEntryTable()</code>创建事件(Event)，这里传入的Entry为<code>mArchProtocols</code>，最终由<code>GenericProtocolNotify()</code>函数给<code>mArchProtocols</code>的每一个成员赋值。这里，<code>CoreCreatEvent()</code>和<code>CoreRegisterProtocolNotify</code>成对出现，一旦Protocol安装则执行回调函数<code>GenericProtocolNotify()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">Creates an event for each entry in a table that is fired everytime a Protocol
</span></span></span><span class="line"><span class="cl"><span class="cm">of a specific type is installed.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">@param Entry  Pointer to EFI_CORE_PROTOCOL_NOTIFY_ENTRY.
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">**/</span>
</span></span><span class="line"><span class="cl"><span class="n">VOID</span>
</span></span><span class="line"><span class="cl"><span class="nf">CoreNotifyOnProtocolEntryTable</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_CORE_PROTOCOL_NOTIFY_ENTRY</span>  <span class="o">*</span><span class="n">Entry</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_STATUS</span>  <span class="n">Status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">ProtocolGuid</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">Entry</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Create the event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Status</span> <span class="o">=</span> <span class="nf">CoreCreateEvent</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">             <span class="n">EVT_NOTIFY_SIGNAL</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">TPL_CALLBACK</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">GenericProtocolNotify</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">Entry</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="o">&amp;</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Event</span>
</span></span><span class="line"><span class="cl">             <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">ASSERT_EFI_ERROR</span> <span class="p">(</span><span class="n">Status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// Register for protocol notifactions on this event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Status</span> <span class="o">=</span> <span class="nf">CoreRegisterProtocolNotify</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">             <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">ProtocolGuid</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Event</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">             <span class="o">&amp;</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Registration</span>
</span></span><span class="line"><span class="cl">             <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">ASSERT_EFI_ERROR</span> <span class="p">(</span><span class="n">Status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在回调函数<code>GenericProtocolNotify</code>中，Bds入口函数<code>BdsEntry()</code>被locate，然后被赋值给<code>*gBds</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1">// See if the expected protocol is present in the handle database
</span></span></span><span class="line"><span class="cl"><span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Status</span> <span class="o">=</span> <span class="nf">CoreLocateProtocol</span> <span class="p">(</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">ProtocolGuid</span><span class="p">,</span> <span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Registration</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Protocol</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="nf">EFI_ERROR</span> <span class="p">(</span><span class="n">Status</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Mark the protocol as present
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Present</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Update protocol global variable if one exists. Entry-&gt;Protocol points to a global variable
</span></span></span><span class="line"><span class="cl"><span class="c1">// if one exists in the DXE core for this Architectural Protocol
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Protocol</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="p">(</span><span class="n">Entry</span><span class="o">-&gt;</span><span class="n">Protocol</span><span class="p">)</span> <span class="o">=</span> <span class="n">Protocol</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后，在Bds的入口函数已经被安装后，<code>DxeMain()</code>的最后通过<code>*gBds</code>指针进入Bds的入口<code>BdsEntry()</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">gBds</span><span class="o">-&gt;</span><span class="nf">Entry</span> <span class="p">(</span><span class="n">gBds</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再讨论一下BDS的Protocol，<code>EFI_BDS_ARCH_PROTOCOL</code>是在<code>Bds.h</code>中定义的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdePkg/Include/Bds.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_EFI_BDS_ARCH_PROTOCOL</span> <span class="n">EFI_BDS_ARCH_PROTOCOL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span>
</span></span><span class="line"><span class="cl"><span class="nf">VOID</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">EFIAPI</span> <span class="o">*</span><span class="n">EFI_BDS_ENTRY</span><span class="p">)(</span>
</span></span><span class="line"><span class="cl">  <span class="n">IN</span> <span class="n">EFI_BDS_ARCH_PROTOCOL</span>  <span class="o">*</span><span class="n">This</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">_EFI_BDS_ARCH_PROTOCOL</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_BDS_ENTRY</span>    <span class="n">Entry</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中，<code>EFI_BDS_ENTRY </code>就是这个protocol的一个服务，对应了一个<code>PROTOCOL_INTERFACE</code>。在之前的<code>InstallMultipleProtocolInterfaces()</code>函数中，<code>Entry</code>函数被指向<code>EFI_BDS_ARCH_PROTOCOL</code>这个Protocol的例化<code>PROTOCOL_INTERFACE</code>中的<code>*Interface</code>指针。所以根据Bds的Guid <code>EFI_BDS_ARCH_PROTOCOL_GUID</code>可以找到<code>EFI_BDS_ARCH_PROTOCOL</code>这个Protocol，再根据这个Protocol找到<code>PROTOCOL_INTERFACE</code>实现，就可以找到具体的被注册的<code>BdsEntry()</code>函数了</p>
]]></description>
</item>
<item>
    <title>理解 UEFI 中的面向对象</title>
    <link>http://gitzhangzhao.github.io/posts/bios/uefi_1/</link>
    <pubDate>Tue, 08 Aug 2023 17:50:12 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/bios/uefi_1/</guid>
    <description><![CDATA[<blockquote>
<p>UEFI 并不是一个面向对象的系统，它是基于 C 语言的，C 语言是一种过程式语言。然而，UEFI 使用了一些设计模式和技术来模拟面向对象编程的某些特性，如封装、抽象和多态</p>
</blockquote>
<ol>
<li>封装：UEFI 使用结构体（struct）来封装数据和操作数据的函数。例如，每个 UEFI 协议都定义为一个结构体，其中包含一组函数指针，这些函数提供了协议的行为。这种方式类似于面向对象编程中的类和方法（Kernel 中也是类似）</li>
<li>抽象：UEFI 使用接口（协议）来定义可以由多个不同的实现提供的行为。这类似于面向对象编程中的接口或抽象类</li>
<li>多态：UEFI 通过使用函数指针和接口（协议）来实现多态。不同的驱动可以提供同一接口的不同实现，然后通过接口来调用这些函数，实现运行时的多态</li>
<li>继承：UEFI 并没有提供类似于面向对象编程中的继承机制。然而，它使用了一种叫做“装饰者”模式的设计模式，通过这种方式，一个驱动可以“装饰”另一个驱动，提供额外的功能，这在某种程度上模拟了继承的行为</li>
</ol>
<h2 id="handle-和-protocol-的概念">handle 和 protocol 的概念</h2>
<p>UEFI 协议把访问设备的方法都抽象成了<code>Handle</code>和<code>Protocol</code>，Handle 是一个抽象的引用，用于引用一个或多个协议接口。一个设备便可以当成是一个 Handle（也可以当成是一个实例 Instance），而 Protocol 则是一个封装了某些操作方法的类（Class）。与面向对象有点区别的是，一个 Handle 可能是由多个 Protocols 组成的</p>
<p>Protocol 是一个由 struct 定义的结构体，这个结构体通常是由数据和函数指针组成。每个结构体的定义都有一个 GUID 与之对应。自然并不是所有的结构体都称之为 protocol，protocol 正如其名，它是一种规范，或称协议。比如要建立一个基于 UEFI Driver Model 的 Driver，就必须要绑定一个 EFI_DRIVER_BINGING_PROTOCOL 的实例，并且要自定义且实现 Support、Start、Stop 函数以及填充实例中其他的数据成员。再例如，EFI_SIMPLE_TEXT_INPUT_PROTOCOL 是一个协议，它定义了一组函数，这些函数可以用于从键盘读取输入</p>
<p><strong>Handle 和 Protocol 都是通过双向链表组织的</strong></p>
<p>定义的三个关键结构体：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Core/Dxe/Hand/Handle.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1">/// IHANDLE - contains a list of protocol handles
</span></span></span><span class="line"><span class="cl"><span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINTN</span>         <span class="n">Signature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// All handles list of IHANDLE
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>    <span class="n">AllHandles</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// List of PROTOCOL_INTERFACE&#39;s for this handle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>    <span class="n">Protocols</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINTN</span>         <span class="n">LocateRequest</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// The Handle Database Key value when this handle was last created or modified
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">UINT64</span>        <span class="n">Key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">IHANDLE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1">/// PROTOCOL_ENTRY - each different protocol has 1 entry in the protocol
</span></span></span><span class="line"><span class="cl"><span class="c1">/// database.  Each handler that supports this protocol is listed, along
</span></span></span><span class="line"><span class="cl"><span class="c1">/// with a list of registered notifies.
</span></span></span><span class="line"><span class="cl"><span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINTN</span>         <span class="n">Signature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// Link Entry inserted to mProtocolDatabase
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>    <span class="n">AllEntries</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// ID of the protocol
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">EFI_GUID</span>      <span class="n">ProtocolID</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// All protocol interfaces
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>    <span class="n">Protocols</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// Registerd notification handlers
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>    <span class="n">Notify</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">PROTOCOL_ENTRY</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINTN</span>             <span class="n">Signature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// Link on IHANDLE.Protocols
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>        <span class="n">Link</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// Back pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">IHANDLE</span>           <span class="o">*</span><span class="n">Handle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// Link on PROTOCOL_ENTRY.Protocols
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>        <span class="n">ByProtocol</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// The protocol ID
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">PROTOCOL_ENTRY</span>    <span class="o">*</span><span class="n">Protocol</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// The interface value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">VOID</span>              <span class="o">*</span><span class="n">Interface</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">/// OPEN_PROTOCOL_DATA list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">LIST_ENTRY</span>        <span class="n">OpenList</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINTN</span>             <span class="n">OpenListCount</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">PROTOCOL_INTERFACE</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>要明白 IHANDLE 这个结构体，就要明白 LIST_ENTRY 是如何被使用的。LIST_ENTRY 定义如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// MdeModulePkg/Include/LinkedList.h
</span></span></span><span class="line"><span class="cl"><span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1">/// _LIST_ENTRY structure definition.
</span></span></span><span class="line"><span class="cl"><span class="c1">///
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="n">_LIST_ENTRY</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIST_ENTRY</span>    <span class="o">*</span><span class="n">ForwardLink</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">LIST_ENTRY</span>    <span class="o">*</span><span class="n">BackLink</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define _LIST_ENTRY LIST_ENTRY
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>首先，上面的<strong>LIST_ENTRY 这个结构体用于实现双向链表</strong>。但是与一般的链表实现方式不一样，它纯粹是 LIST*ENTRY 这个成员的链接，而不用在乎这个成员所在的结构体。一般的链表要求结点之间的类型一致，而这种链表只要求结构体存在 EFI_LIST_ENTRY 这个成员就够了。比如说 <code>IHANDLE *handle1,_handle2</code>;初始化后，<code>handle1-&gt;AllHandles-&gt;ForwardLink=handle2-&gt;AllHandles</code>; <code>handle2-&gt;AllHandles-&gt;BackLink=handle1-&gt;AllHandles</code>。这样 handle1 与 handle2 的 AllHandles 就链接到了一起。但是这样就只能进行 AllHandles 的遍历了，怎么样遍历 IHANLE 实例呢？。这时候就要用到_CR 宏，_CR 宏的定义如下：<code>#define \_CR(Record, TYPE, Field) ((TYPE _) ((CHAR8 _) (Record) - (CHAR8 _) &amp;(((TYPE \_) 0)-&gt;Field)))</code>，这个宏可以通过结构体实例的成员访问到实例本身</p>
<p><strong>IHANDLE 中的 AllHandles 成员用来链接 IHANDLE 实例</strong>。这个链表的头部是一个空结点，定义为：<code>EFI_LIST_ENTRY gHandleList</code>。一开始 <code>gHandleList-&gt;ForwardLink=gHandleList</code>; <code>gHandleList-&gt;BackLink=gHandleList</code>。每次 IHANDLE 都从 <code>gHandleList-&gt;BackLink</code> 插入进来，这个链表是一个环形双向链表。每当 Driver 建立一个新的 EFI_HANDLE 的时候就会插入到这条链表中来，被称之为 Handle Database</p>
<p><strong>Driver 会为 handle 添加多个 protocol</strong>，这些实例也是链表的形式存在。PROTOCOL_INTERFACE 的 link 用于连接以 IHANDLE 为空头结点以 PPOTOCOL_INTERFACE 为后续结点的链表</p>
<p>具体而言：IHANDLE 结构体定义中，Protocols 是一个 LIST_ENTRY 类型的成员，它是一个双向链表。这个链表用于链接所有的 PROTOCOL_INTERFACE 实例。在这个链表中，每个节点都包含两个指针：ForwardLink 和 BackLink。ForwardLink 指向链表中的下一个节点，BackLink 指向链表中的上一个节点。这样，通过遍历这个链表，就可以访问到所有的 PROTOCOL_INTERFACE 实例</p>
<p>此外，PROTOCOL_ENTRY 结构体是用来管理和跟踪已注册的协议的。每个协议都有一个对应的 PROTOCOL_ENTRY 实例，这个实例包含了协议的标识符和一个链表，这个链表链接了所有安装了这个协议的协议接口。例如，假设我们有一个协议 EFI_SIMPLE_TEXT_INPUT_PROTOCOL，它的标识符是{0x387477c1, 0x69c7, 0x11d2, {0x8e, 0x39, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b}}。当这个协议被注册时，会创建一个 PROTOCOL_ENTRY 实例，这个实例的 ProtocolID 成员被设置为这个标识符，Protocols 链表被初始化为一个空链表。然后，当一个驱动程序安装了一个 EFI_SIMPLE_TEXT_INPUT_PROTOCOL 协议接口到一个句柄上时，这个协议接口的 PROTOCOL_INTERFACE 实例就会被添加到 Protocols 链表中。这样，通过遍历 Protocols 链表，就可以找到所有安装了 EFI_SIMPLE_TEXT_INPUT_PROTOCOL 的协议接口</p>
<p>上述的标识符就是 GUID，<strong>每个协议接口都由一个全局唯一标识符（GUID）来标识</strong>。当一个驱动程序或应用程序想要使用一个特定的协议接口时，它需要通过 GUID 来查找这个协议接口。这个过程通常是通过调用 LocateProtocol 或 OpenProtocol 这样的 UEFI 服务来完成的。例如，如果一个驱动程序想要使用 EFI_SIMPLE_TEXT_INPUT_PROTOCOL（这是一个用于从键盘读取输入的协议），它需要先获取这个协议的 GUID，然后调用 LocateProtocol 函数，传入这个 GUID 作为参数。如果成功，LocateProtocol 函数会返回一个指向 EFI_SIMPLE_TEXT_INPUT_PROTOCOL 接口的指针，然后驱动程序就可以通过这个指针来调用协议的函数。这种通过 GUID 来访问协议接口的机制使得 UEFI 可以在运行时动态地添加、删除和查找协议接口，这是一种非常灵活和强大的设计</p>
<p>根据此前的分析：在 UEFI 中，一个句柄（Handle）可以关联多个协议接口（Protocol Interface），这些协议接口被组织成一个链表，这个链表可以通过句柄的 Protocols 成员来访问。然而，在实际的使用中，通常不会直接操作这个链表。相反，UEFI 提供了一组服务，如 LocateProtocol 和 OpenProtocol，这些服务可以根据 GUID 来查找协议接口，这使得查找协议接口变得更加简单和安全。总的来说，虽然可以直接通过句柄的 Protocols 成员来访问所有的协议接口，但在实际的使用中，通常会通过 UEFI 提供的服务来查找和访问协议接口</p>
<p><strong>以上的概念用下图来描述：</strong></p>
<p></p>
<hr>
<p>待续</p>
]]></description>
</item>
<item>
    <title>Boot 过程分析</title>
    <link>http://gitzhangzhao.github.io/posts/bios/boot/</link>
    <pubDate>Fri, 04 Aug 2023 14:00:29 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/bios/boot/</guid>
    <description><![CDATA[<p>本篇文章详细完整的讨论现代处理器 boot 的过程，主要面向对象为 Intel、AMD 的 X86 架构和大部分 ARM 处理器架构</p>
<p></p>
<p><strong>前置概念</strong></p>
<ul>
<li>
<p>CPU 的引脚宝贵，只能用来连接高速设备（包括 Memory 和 PCIE 设备），原本通过北桥芯片来连接。但是目前，北桥芯片（用来连接内存和高速 PCIE）已经被集成进 CPU 中</p>
</li>
<li>
<p>低速的 IO（USB、SATA、eSPI 等）和其余的 PCIE 设备，不会直连 CPU 的，而是通过南桥芯片（PCH）来连接。PCH 是一块 IO 密集型芯片，BMC 芯片和 BIOS 芯片也是连接在 PCH 上的。然后 PCH 通过高速串行的总线 DMI 来和 CPU 连接，这样的目的是节约 CPU 的引脚（本质上是引脚复用）</p>
</li>
</ul>
<h2 id="after-cpu-加电或-reset-后到-bios-执行之前的阶段">After CPU 加电或 Reset 后，到 BIOS 执行之前的阶段</h2>
<h3 id="1-cpu-自检">1. CPU 自检</h3>
<ul>
<li>CPU 进行自身硬件初始化。初始化完成后，CPU 被设置为实地址模式，地址无分页。所有寄存器被初始化为特定的值， Cache、TLB（Translation Lookup Table）、BLB（Branch Target Buffer）这三个部件的内容被清空（Invalidate）</li>
</ul>
<h3 id="2-设置-cpu-寄存器">2. 设置 CPU 寄存器</h3>
<ul>
<li>寄存器 EIP（Instruction Pointer）、CS（Code Segment）被设置为 0x0000FFF0 和 0xFFFF0000。在实地址模式下（寄存器字长为 16 位），指令的物理地址是 CS &laquo; 4 + EIP。CPU 根据硬件设计，计算出第一条指令的地址：0xFFFF0000+0xFFF0 = 0xFFFFFFF0。随后，CPU 会从这个地址取指令并执行，需要在这个地址存放 BIOS 的代码</li>
</ul>
<h3 id="3-load-bios">3. Load BIOS</h3>
<ul>
<li>
<p>现在的问题是：在上电启动后，CPU 外围设备包括内存初始化还没有进行，没有内存可供使用，虽然有可以直接使用 Cache 替代内存的方法(Cache As RAM，CAR)，但总是没有直接用起来方便</p>
</li>
<li>
<p>但是，BIOS 代码是存放在一块 NOR Flash 中的，这块 Flash 在主板上通过 SPI 总线与 PCH 相连。NOR Flash 和我们用在 SSD 里面的 Flash 一个显著的不同就是它是字节寻址的，而不是块寻址。这就意味着它可以 XIP（eXecute in place），直接执行代码而不需要先 copy 到内存中</p>
</li>
<li>
<p>随后，CPU 去寻址 0xFFFFFFF0，PCH 的 SPI 总线默认 decode 该地址，从 Flash 芯片取指令；SPI 控制器响应 Flash 并返回内容给 DMI 总线（连接 PCH 和 CPU 的总线）；DMI 总线将指令给 CPU，开始解码执行。随后，通过这种方式一点一点 decode 运行，这个过程通常又称为 shadow</p>
</li>
</ul>
<h2 id="after-bios-被启动">After BIOS 被启动</h2>
<blockquote>
<p>在此之前，需要先明确什么是 BIOS？以及目前的 BIOS 是什么架构？</p>
</blockquote>
<p><strong>需要明确的是，启动 OS 并不一定需要使用 BIOS</strong>，我们常见的嵌入式设备（arm），它们使用 BootLoader 来引导 OS（一般是指 Linux），BootLoader 相当于 BIOS 的角色，负责初始化内存，加载 OS 内核等。由于嵌入式设备的硬件环境各不相同，没有统一的标准，所以在不同嵌入式硬件上运行 OS 每次都得修改配置 BootLoader 和内核，比较繁琐</p>
<p><strong>BIOS 存在的条件是统一的硬件，像嵌入式这种就完全没有必要了</strong>。传统的 PC 设备和服务器则不一样，整个硬件系统架构都是有标准的，早期由 Intel，IBM，AMD 等大厂制定，发展至今已成为一套成熟且统一的系统架构。同样的，既然硬件能统一，OS 也可以做到一致。此时，要让 OS 可以在硬件工作起来，还需要一段引导程序，负责检初始化硬件（如初始化内存），检测硬件资源（如可否正常分配资源）等，前面这些都正常了，说明 OS 正常运行的条件满足了，此时做最后一步就是引导启动 OS 了，这一阶段的程序就称为 BIOS。BIOS 就是分级的配置各种硬件寄存器，Load Kernel, 启动 Boot Manager。这个过程是很复杂的，OS Loader 然后把控制权交接给 Kernel。最后，退居幕后给 Kernel 提供运行时服务</p>
<p><strong>目前的 BIOS 采用 UEFI 标准设计</strong>，是一个简易的小操作系统，在完成主线任务的同时，也提供 UI、Shell 等方便交互的程序</p>
<blockquote>
<p>早期以汇编为主的 BIOS 经过发展被目前的 UEFI BIOS 所替代。要了解 UEFI，还需要明确下面的概念：</p>
</blockquote>
<p>首先，UEFI 只是一个规范，没有具体的实现。<strong>就目前而言，BIOS 就是指 UEFI，UEFI 就是 BIOS，不需要再进行区分</strong>。UEFI 是 Intel 及其小弟联合的规范，后来分为 UEFI 和 PI 两个部分，PI 后面再说。UEFI 侧重于和操作系统的接口，纯粹地是一个接口规范，它不会具体涉及平台固件是如何实现的。对于一台计算机，UEFI 固件提供服务，grub 这类 OS Loader 依赖于 UEFI 固件提供的接口来启动 Linux 内核。UEFI 是一套规范，阐述了 UEFI 需要实现哪些功能，这些功能该怎么实现，实现的时候需要使用什么名称。比如规范中有一个 USB 相关的定义，有一个 USB Host Controller Protocol，用来控制 USB 控制器，这个 Protocol 需要由 13 个函数组，每个函数都有详细注明了它的使用方法，传入传出参数，返回值等，但是具体函数内部具体如何实现是不做要求的，只要能实现对应的功能即可:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">_EFI_USB2_HC_PROTOCOL</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_GET_CAPABILITY</span>              <span class="n">GetCapability</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_RESET</span>                       <span class="n">Reset</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_GET_STATE</span>                   <span class="n">GetState</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_SET_STATE</span>                   <span class="n">SetState</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_CONTROL_TRANSFER</span>            <span class="n">ControlTransfer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_BULK_TRANSFER</span>               <span class="n">BulkTransfer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_ASYNC_INTERRUPT_TRANSFER</span>    <span class="n">AsyncInterruptTransfer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_ASYNC_INTERRUPT_TRANSFER</span>    <span class="n">SyncInterruptTransfer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_ISOCHRONOUS_TRANSFER</span>        <span class="n">IsochronousTransfer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_ASYNC_ISOCHRONOUS_TRANSFER</span>  <span class="n">AsyncIsochronousTransfer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_GET_ROOTHUB_PORT_STATUS</span>     <span class="n">GetRootHubPortStatus</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_SET_ROOTHUB_PORT_FEATURE</span>    <span class="n">SetRootHubPortFeature</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">EFI_USB2_HC_PROTOCOL_CLEAR_ROOTHUB_PORT_FEATURE</span>  <span class="n">ClearRootHubPortFeature</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINT16</span>                                           <span class="n">MajorRevision</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">UINT16</span>                                           <span class="n">MinorRevision</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">EFI_USB2_HC_PROTOCOL</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>UEFI 是标准，是给别人用的</strong>。UEFI 的使用者包括但不仅限于操作系统加载器（OS Loader），安装程序（installers），来自引导设备的 ROM（adapter ROMS），操作系统的预诊断程序（pre-OS diagnostics），工具（utilities）以及操作系统运行时服务（OS runtimes-services）。通常，UEFI 是关于如何进行引导过程的。引导就是一个将控制权限连续，逐级地移交，从而启动整个 OS 的过程，这就是 OS Loader 所肩负的职责</p>
<p><strong>UEFI 的规范可以当做是一套库函数，是用来被调用的</strong>，那要怎么去使用这些库呢？整套引导的代码该从哪里写起？这时候一份称为《Platform Initialization Specification》（简称 PI Spec）的手册派上用场了</p>
<p><strong>PI （Platform Initialization）规定了如何实现一个 UEFI 环境</strong>，是另一个规范，从 UEFI 分离出来的。PI 描述了从平台重启直到构建出 UEFI 兼容环境所需的完整过程。“如何实现”这一内容是 PI 要解决的问题。与 UEFI 的开放不同，PI 对 pre-OS 引导程序，OS，以及他们的加载器，在极大程度上是无关的，因为 PI 中有太多与这些 UEFI 使用者无关的平台构造方面的程序。PI 描述了从平台重启直到构建出 UEFI 兼容环境所需的完整过程。PI 手册定义了 UEFI 代码的各个启动阶段（除了 SEC 阶段）的流程，每个阶段需要做哪些操作。此外，还定义了启动过程中使用到的一些机制，如 HOB，SMM，S3 Resume 等</p>
<blockquote>
<p>基于以上的规范，UEFI 代码 EDK 便可以实现了，目前最新的代码已经更名为 EDK2，是目前所有 UEFI 固件的基础代码</p>
</blockquote>
<p><strong>EDK2 主要是实现手册所定义的各项基本功能，是一套通用的代码</strong>，并不能直接拿来使用，还需要根据各个平台的差异做修改或对功能进行扩充，此时就有了做这项工作 UEFI 代码厂商，他们会整合优化 EDK2 的基础代码和芯片厂商（Intel、AMD 还有中国的龙芯，兆芯等）的核心代码，有些还会加进一些自家的特色功能，让代码使用起来更加便捷。AMI 就是比较著名的厂家，他们的代码都进行了深度的定制，很多功能几乎只要改改 enable 跟 disable 就可以了</p>
<p><strong>在了解了基本概念后，开始分析 BIOS 的执行</strong></p>
<h3 id="bios-进入">BIOS 进入</h3>
<hr>
<p>待续</p>
]]></description>
</item>
<item>
    <title>Petalinux(三)：完全使用手册</title>
    <link>http://gitzhangzhao.github.io/posts/embedeedevr/petalinux/petalinux_3/</link>
    <pubDate>Sat, 01 Jul 2023 15:52:02 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/embedeedevr/petalinux/petalinux_3/</guid>
    <description><![CDATA[<blockquote>
<p>之前的两篇文章介绍了 Petalinux 的安装和远程启动，本手册是系列的第三篇文章。本篇以 Embedded EVR 为例，详细介绍从 FPGA 代码的综合、布局布线、生成 bit 流，到使用 Petalinux 创建工程、配置、编译和部署的过程</p>
</blockquote>
<blockquote>
<p>前提条件：一台可以联网的服务器，并且已经安装好 Vivado 软件</p>
</blockquote>
<h2 id="前言">前言</h2>
<p>博士期间，我主要利用 timing4(192.168.206.186) 服务器完成嵌入式 EVR 的研究，其中涉及到 FPGA 开发和嵌入式 Linux 系统。嵌入式系统的开发往往具有步骤复杂、过程繁琐的特点，Petalinux 这类自动化的软件工具大大简化了开发步骤</p>
<p>在 Docker 环境中使用 Petalinux 的原因，已经在系列第一篇文章中介绍了。本手册按照如下的步骤来介绍 Petalinux 的使用：</p>
<ul>
<li>在 timing4 上生成嵌入式 EVR 的 bit 流文件</li>
<li>导出嵌入式 EVR 的硬件描述文件到 Petalinux 容器中</li>
<li>制作 Petalinux 镜像，以 2017.04 为例</li>
<li>使用 Petalinux 镜像创建容器</li>
<li>启动容器，创建 Petalinux 工程</li>
<li>修改或添加所需的设备树</li>
<li>根据硬件描述文件配置 Petalinux</li>
<li>配置 Linux 内核、U-Boot 和根文件系统</li>
<li>编译整个 Petalinux 工程</li>
<li>打包并整理内核、U-Boot 和根文件系统等镜像</li>
<li>使用镜像文件制作可启动的 TF 卡</li>
<li>容器使用中可能遇到的问题</li>
<li>在遇到不可解决的问题时，恢复 Docker 环境</li>
</ul>
<h2 id="内容">内容</h2>
<h3 id="在-timing4-上生成嵌入式-evr-的-bit-流文件">在 timing4 上生成嵌入式 EVR 的 bit 流文件</h3>
<h4 id="1-登录到-timing4-服务器的图形界面">1. 登录到 timing4 服务器的图形界面</h4>
<p>由于我们需要使用 Vivado 工具，所以需要登录图形界面。登录 timing4 服务器的图形化界面有两种方式：</p>
<ul>
<li>
<p>使用 xrdp 协议
timing4 服务器安装了 xrdp 服务器，可以直接使用 windows 自带的远程桌面，登录 192.168.206.186.用户名使用自己的用户名，随后会提示输入密码</p>
<p></p>
</li>
<li>
<p>使用 rustdesk
timing4 服务器上安装了 rustdesk Server，远程登录需要在 timing4 上安装运行 rustdesk Client，并且在自己的电脑上也安装好 rustdesk Client。具体的操作步骤请参考<a href="https://rustdesk.com/docs/zh-cn/" target="_blank" rel="noopener noreffer">rustdesk 使用手册</a></p>
</li>
</ul>
<p>上述两种方式各有优劣，方式 1 不需要安装额外客户端软件，方式 2 具有文件传输等更丰富便捷的功能</p>
<h4 id="2-启动-vivado">2. 启动 Vivado</h4>
<p>timing4 上的 Vivado 安装在目录<code>/opt/Xilinx/Vivado/2017.4</code>下，在这个目录下存在 setting64.sh 文件，其中配置了 Vivado 所需的一些环境变量以及 PATH 变量。建议在启动 Vivado 之前先执行<code>source /opt/Xilinx/Vivado/2017.4/setting64.sh</code>，也可以将这个命令添加进用户自己的.bashrc 或者.zshrc 中。.zshrc 中的环境变量可以参考<code>/home/zhangzh/.zshrc</code></p>
<p>在终端中执行 vivado 命令，即可打开 Vivado 的图形化界面，此后的操作和 Windows 下一致：</p>
<p></p>
<h4 id="3-在-vivado-中综合并布线嵌入式-evr">3. 在 Vivado 中综合并布线嵌入式 EVR</h4>
<p>嵌入式 EVR 的代码放在目录<code>/home/zhangzh/Lab/vivado</code>中，其中 test9 为 EVR 功能模块的代码，打包为自定义 IP，放在<code>/home/zhangzh/Lab/vivado/test9/test9.ip_user_files</code>目录下。test9_wizard 为自定义 IP 和 ZYNQ IP 的连线工程，其主要内容为 Block Design 和约束文件</p>
<p></p>
<p>如果没有修改代码的需要，则只需打开 test9_wizard 工程。在下图 1 的位置有生成 bit 流的按钮，将按顺序自动的运行综合，布局布线，最后产生 bit 流。一杯咖啡后，右上角显示<code>wirte_bitstream Complete √</code>即表示运行成功。布线后生成的 bit 流文件为<code>/home/zhangzh/Lab/vivado/test9_wizard/test9_wizard.runs/impl_1/design_1_wrapper.bit</code>。这个文件可以通过 JTAG 的方式直接烧写进 FPGA 中，但无法被 U-Boot 或 xdevcfg 烧写。还需要使用 bootgen 工具将其转换为 BIN 文件格式</p>
<p></p>
<h4 id="4-将硬件描述文件导出">4. 将硬件描述文件导出</h4>
<p>为什么上一步已经得到了嵌入式 EVR 的 bit 流，还需要将硬件描述文件导出？这是因为硬件描述文件(.hdf)描述了完整的硬件信息，包括 FPGA 中使用的资源，这些信息正是 Petalinux 所需要的。需要注意的是，在 Vivado 的高版本中，hdf 文件已经被 xsa 文件替代</p>
<p></p>
<p>此时，FPGA 部分的工作就可以结束了，Petalinux 随后会根据硬件描述文件中提供的信息去配置工程，或者从 Vivado 工程中将 bit 流文件拷贝出来。在 Petalinux 最终生成的镜像文件中，同样也包含 bit 流文件</p>
<h3 id="制作-petalinux-镜像">制作 Petalinux 镜像</h3>
<p>本节以 2017.04 版本为例，介绍如何在 timing4 上制作 Petalinux 镜像</p>
<ol>
<li>创建 Dockerfile 文件</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ touch Dockerfile
</span></span><span class="line"><span class="cl"><span class="c1"># 将以下内容写入 Dockerfile</span>
</span></span><span class="line"><span class="cl">$ cat Dockerfile
</span></span><span class="line"><span class="cl">FROM ubuntu:16.04
</span></span><span class="line"><span class="cl">RUN dpkg --add-architecture i386
</span></span><span class="line"><span class="cl">RUN apt update <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="o">&amp;&amp;</span> apt install -y sudo libssl-dev flex bison chrpath socat autoconf libtool texinfo gcc-multilib libsdl1.2-dev libglib2.0-dev screen pax net-tools wget diffstat xterm gawk xvfb git make libncurses5-dev tftpd zlib1g libssl-dev gnupg tar unzip build-essential libtool-bin dialog cpio lsb-release zlib1g:i386 zlib1g-dev:i386 locales openjdk-8-jdk<span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"># build 镜像
</span></span></span><span class="line"><span class="cl"><span class="s2"></span>$<span class="s2"> docker build -t &lt;image_name&gt; .
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 docker images 命令来管理镜像。latest 为默认的镜像 tag</p>
<p></p>
<h3 id="使用-petalinux-镜像创建容器">使用 Petalinux 镜像创建容器</h3>
<p>获得镜像后，创建一个容器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 使用镜像创建容器</span>
</span></span><span class="line"><span class="cl">$ docker run -it --name &lt;name&gt; -v &lt;dir:dir&gt; --user root &lt;image_name&gt; /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 docker exec 命令启动 docker</span>
</span></span><span class="line"><span class="cl">$ docker start name
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> --user root -it &lt;name&gt; /bin/bash
</span></span></code></pre></td></tr></table>
</div>
</div><p>进入容器后，在容器中继续执行安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"><span class="c1"># 添加普通用户</span>
</span></span><span class="line"><span class="cl">$ adduser &lt;user_name&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 修改 /etc/sudoers 文件，添加 sudo 权限</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 用普通用户身份启动 docker</span>
</span></span><span class="line"><span class="cl">$ docker <span class="nb">exec</span> --user &lt;user_name&gt; -it &lt;name&gt; /bin/bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置安装 locales， 使用 en_US.UTF-8</span>
</span></span><span class="line"><span class="cl">$ sudo dpkg-reconfigure locales
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置 LANG 环境变量为 en_US.UTF-8</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span><span class="s2">&#34;en_US.UTF-8&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从共享目录中将 Petalinux 安装镜像 copy 到容器中</span>
</span></span><span class="line"><span class="cl">$ cp /mnt/petalinux/petalinux-v2017.4-final-installer.run ~
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行安装，lisence 输入 yes</span>
</span></span><span class="line"><span class="cl">$ ./petalinux-v2017.4-final-installer.run dir
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装完成后，source Petalinux 的安装目录中的 setting.sh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># petalinux 开头的命令可以使用</span>
</span></span><span class="line"><span class="cl">$ petalinux-xxx
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 docker ps -a 查看所有的容器
</p>
<p>其中 petalinux_image 创建了 2 个容器，这两个容器是相关不关联的</p>
<p>注意：mzz2017/v2raya 镜像和 v2ray 容器是 timing4 服务器上的系统代理，用于访问外网。在浏览器中输入<code>localhost:2017</code>，管理代理的节点</p>
<h3 id="进入容器">进入容器</h3>
<p>此时 petalinux_20220621 容器已被成功创建</p>
<p>timing4 每次重启后，都需要运行<code>docker start petalinux_20220621</code>来启动容器。然后使用<code>docker exec --user zhangzh -it petalinux_20220621 /bin/bash</code> 命令来进入容器，<code>--user</code>后应为自己在容器中新建的用户。使用 exit 退出容器，此时容器没有关闭，下次仍然使用<code>docker exec</code>命令进入</p>
<p>需要注意的是：Petalinux 不支持除了 bash 以外的其他 shell</p>
<p>为了方便每次 source Petalinux 的安装目录中的 setting.sh，可以在自己的目录下的<code>.bashrc</code>文件中添加如下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ tail -3 .bashrc
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span><span class="s2">&#34;en_US.UTF-8&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> <span class="nv">$HOME</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /xxx/settings.sh
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建-petalinux-工程">创建 Petalinux 工程</h3>
<p>进入 Petalinux 环境后，在普通用户下新建工程目录，然后使用<code>petalinux-creat</code>创建一个工程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ petalinux-create --type &lt;project_type&gt; --template zynq --name xxx
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>这里的 type 是创建的类型，有三种类型：
<ul>
<li>project: petalinux 标准的工程</li>
<li>apps: linux 用户态应用程序，首先创建好 project，在到工程目录下使用<code>petalinux-create -t apps --template install --name &lt;app-name&gt; --enable</code>命令创建一个应用。<code>--template</code>可以选择 c、c++等模板。然后将应用程序代码拷贝到<code>components/apps/&lt;app-name&gt;/src</code>目录下，应用程序就可以被 Petalinux 编译并包含在根文件系统镜像中</li>
<li>modules: linux 内核态模块，用于在 Petalinux 环境下编写内核模块代码，编写的内核模块会被包含在根文件系统镜像中</li>
</ul>
</li>
</ul>
<p>在嵌入式 EVR 中，只需要创建 project，应用程序 EPICS 不通过 Petalinux 来编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">$ petalinux-create --type project --template zynq --name embedded_evr
</span></span></code></pre></td></tr></table>
</div>
</div><p>此时，一个 Petalinux 工程就被创建完毕了。此时目录中只有<code>config.project</code>文件和<code>project-spec</code>目录</p>
<h3 id="添加设备树节点">添加设备树节点</h3>
<p>在工程创建好以后，我们先不导入硬件配置，而要添加我们需要的代码。对于嵌入式 EVR，FPGA 部分相当于 Linux 的设备，所以需要添加一个挂在 AXI 总线上的节点</p>
<p>ZYNQ 本身带了一些设备树文件，Petalinux 会默认包含并编译这部分设备树文件。这些设备树文件用于 PS 部分一些标准的系统和 FPGA 部分的官方 IP。对于嵌入式 EVR 这种自定义的设备，就需要添加新的设备树。Petalinux 中添加设备树不需要修改 ZYNQ 的设备树代码，而是在目录<code>/home/zhangzh/workspace/embedded_evr/project-spec/meta-user/recipes-bsp/device-tree/files</code>下的<code>system-user.dtsi</code>文件中进行修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 添加如下内容
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/include/ &#34;system-conf.dtsi&#34;
</span></span><span class="line"><span class="cl">/ {
</span></span><span class="line"><span class="cl">amba_pl: amba_pl {
</span></span><span class="line"><span class="cl">                #address-cells = &lt;1&gt;;
</span></span><span class="line"><span class="cl">                #size-cells = &lt;1&gt;;
</span></span><span class="line"><span class="cl">                compatible = &#34;simple-bus&#34;;
</span></span><span class="line"><span class="cl">                ranges ;
</span></span><span class="line"><span class="cl">                uio_dev@43c00000 {
</span></span><span class="line"><span class="cl">                        compatible = &#34;generic-uio&#34;;
</span></span><span class="line"><span class="cl">                        interrupt-controller;
</span></span><span class="line"><span class="cl">                        interrupt-parent = &lt;&amp;intc&gt;;
</span></span><span class="line"><span class="cl">                        interrupts = &lt;0x0 0x1d 0x1&gt;;
</span></span><span class="line"><span class="cl">                        reg = &lt;0x43c00000 0x10000&gt;;
</span></span><span class="line"><span class="cl">                };
</span></span><span class="line"><span class="cl">        };
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了让内核匹配设备驱动程序，还需要修改内核启动参数，将<code>generic-uio</code>标识符传入内核。通常有两种方式，可以在<code>petalinux config</code>后或者直接在上述文件中添加 bootargs 变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 添加内核启动参数
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chosen {
</span></span><span class="line"><span class="cl">            bootargs = &#34;console=ttyPS0,115200 earlyprintk uio_pdrv_genirq.of_id=generic-uio root=/dev/mmcblk0p2 rw rootwait&#34;;
</span></span><span class="line"><span class="cl">            stdout-path = &#34;serial0:115200n8&#34;;
</span></span><span class="line"><span class="cl">        };
</span></span></code></pre></td></tr></table>
</div>
</div><p>在设备树中添加的内核参数会被 U-Boot 程序读取，并设置 U-Boot 的 bootargs 变量。其中，对于 ZYNQ console 的值为 ttyPS0，波特率取决于串口芯片。root 挂载的文件系统必须是 linux 系统支持的根文件系统设备名。<code>uio_pdrv_genirq.of_id</code>表示了<code>uio_pdrv_genirq</code>这个驱动程序匹配字符串，需要和设备树中的一致</p>
<p>另一种方式是<code>petalinux-config</code>后，在 tui 界面中找到<code>user set bootargs</code>并添加</p>
<p></p>
<h3 id="根据硬件描述文件配置-petalinux">根据硬件描述文件配置 Petalinux</h3>
<p>随后，执行如下命令，Petalinux 会从 vivado 工程中导入硬件描述文件，并自动完成硬件的相关配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl"> petalinux-config --get-hw-description /mnt/vivado/test9_wizard/test9_wizard.sdk
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述命令有几个需要注意的点：</p>
<ul>
<li>容器内部的/mnt 目录也就是外部系统的共享目录。创建容器时，需要将<code>/home/zhangzh/Lab</code>目录和容器的<code>/mnt</code>目录共享。如果共享了别的目录，应该修改这里的路径，使 Petalinux 找到 vivado 工程的目录</li>
<li>嵌入式事件定时系统的 hdf 文件导出到了 test9_wizard 路径下</li>
<li>路劲需要写到 vivado 工程根目录下的 sdk 文件夹</li>
<li>命令执行期间会弹出 tui 界面进行配置</li>
</ul>
<p>对于嵌入式事件定时系统，需要在此时更改上一节中所描述的内核启动参数</p>
]]></description>
</item>
<item>
    <title>Petalinux(二)：远程启动</title>
    <link>http://gitzhangzhao.github.io/posts/embedeedevr/petalinux/petalinux_2/</link>
    <pubDate>Mon, 19 Jun 2023 11:48:55 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/embedeedevr/petalinux/petalinux_2/</guid>
    <description><![CDATA[<blockquote>
<p>对于 Linux 远程启动是很普遍的，在 Petalinux 上配置远程启动很简单，并且 Petalinux 会自动配置 U-Boot 变量并增加内核启动参数</p>
</blockquote>
<h3 id="1-目标">1. 目标</h3>
<ul>
<li>
<p>内核文件通过 tftp 从 host 下载并启动，挂载的根文件系统为网络文件系统（nfs）</p>
</li>
<li>
<p>基本过程：BOOT.BIN 文件包括了硬件 bit 流、FSBL 和 U-Boot，这个文件放在板卡的 tf 卡或者 QSPI Flash 中，用于启动 Linux 内核。Linux 内核和设备树文件 image.ub 放在 host 上的 tftpboot 目录，U-Boot 通过 tftp 下载内核镜像到内存中，并启动内核。内核启动后，挂载 host 上的 nfs 文件系统作为根文件系统</p>
</li>
</ul>
<h3 id="2-组成fsblu-bootkernel-和根文件系统">2. 组成：FSBL、U-Boot、kernel 和根文件系统</h3>
<ol>
<li><strong>FSBL：</strong> 第二阶段引导文件，由 vivado 提供源码，用于在第一阶段引导代码（固定在芯片内的 rom 里）结束后，初始化一些 ZYNQ 常用的外设，由于是外部代码，可以根据需要自行修改</li>
<li><strong>U-Boot：</strong> 第二阶段引导结束后将跳转执行 U-Boot，fsbl 没有远程拷贝的功能，所以 U-Boot 必须放置在板卡的可启动 ROM 内，主要为 TF 卡和 QSPI FLASH；U-Boot 具有板卡上大部分设备的驱动程序，可以配置网络，下载镜像并拷贝进内存中，最后跳转到内核的启动点</li>
<li><strong>device tree：</strong> 设备树文件描述了硬件设备的信息，需要被 U-Boot 拷贝进内存并告诉内核地址，内核启动后读取设备树文件获取设备信息</li>
<li><strong>Kernel：</strong> 内核镜像，有 uImage、zImage 等不同形式，具有不同的压缩方式与格式。U-Boot 支持各种形式的内核镜像，内核可以在本地部署也可以通过 tftp 或者 nfs 协议从 host 下载内核镜像，内核启动后初始化硬件并挂载根文件系统</li>
<li><strong>根文件系统：</strong> 内核可以挂载本地 eMMC、TF 卡和远程 host 中的文件系统</li>
</ol>
<h3 id="3-boot-所需文件的来源">3. BOOT 所需文件的来源</h3>
<ol>
<li><strong>FSBL：</strong> 由 VIVADO SDK 工具提供，使用 make 编译</li>
<li><strong>U-Boot：</strong> 由官方发布源码，Xilinx 添加一些独有驱动，在 Github Xilinx 代码仓库维护，使用 make 编译</li>
<li><strong>Kernel：</strong> Linux 内核源码，使用 make 编译</li>
<li><strong>device tree：</strong> 由内核提供一部分，Xilinx 提供一部分，用户也可以自行添加，使用内核工具中的设备树专用编译器编译</li>
<li><strong>根文件系统：</strong> 不同发行版针对不同体系结构有不同的根文件系统，目录结构固定，直接解压到被挂载的根目录，不需要编译</li>
</ol>
<p></p>
<h3 id="各种文件的组织方式">各种文件的组织方式</h3>
<p>由于最终都是将各种镜像拷贝进内存，被在每一阶段的最后跳转到下一阶段的执行点，所以理论上 BOOT 的过程可以将各种文件放置在不同的位置，或者相同位置下的不同文件</p>
<h4 id="boot-文件的打包">BOOT 文件的打包</h4>
<ol>
<li>FSBL、U-Boot、kernel、device tree 一起打包进 BOOT.BIN</li>
<li>FSBL、U-Boot 打包进 BOOT.BIN，kernel 和 device tree 打包进 image.ub</li>
<li>FSBL、U-Boot 打包进 BOOT.BIN，kernel 和 device tree 独立为 zImage 和 system.dtb</li>
<li>在 2 或 3 的基础上，BOOT.BIN 放在本地，kernel 和 device tree 放在远端，U-Boot 通过 tftp 协议从网络下载 kernel 和 device tree</li>
<li>在 2 或 3 的基础上，BOOT.BIN 放在本地，kernel 和 device tree 放在远端，U-Boot 通过 nfs 协议从网络下载 kernel 和 device tree</li>
<li>在 1、2、3、4、5 的基础上，BOOT.BIN 可以放在 tf 卡的第一分区或者 QSPI Flash 中</li>
<li>在 1、2、3、4、5、6 的基础上，根文件系统可以放在 tf 卡的非第一分区、eMMC 或通过 nfs 从网络挂载</li>
</ol>
<h2 id="4-使用手动编译生成可远程启动的镜像文件">4. 使用手动编译生成可远程启动的镜像文件</h2>
<ul>
<li>
<p>使用手动编译 U-Boot 和 kernel 过程略</p>
<h3 id="配置-u-boot-环境变量通过-tftp-启动-linux-kernel">配置 U-Boot 环境变量通过 tftp 启动 linux kernel</h3>
<ul>
<li>在 U-Boot 启动后，通过配置一些 U-Boot 环境变量来远程启动内核，这里假设内核和设备树文件放在 host 的/tftpboot 目录内</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 设置本机ip地址和host ip地址</span>
</span></span><span class="line"><span class="cl">zynq&gt; setenv ipaddr 192.168.206.187
</span></span><span class="line"><span class="cl">zynq&gt; setenv serverip 192.168.206.187
</span></span><span class="line"><span class="cl"><span class="c1"># 将内核镜像zImage和设备树文件system.dtb通过tfpt下载进内存</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将内核镜像下载到内存地址0x10000000</span>
</span></span><span class="line"><span class="cl">zynq&gt; tftpboot <span class="m">10000000</span> zImage
</span></span><span class="line"><span class="cl"><span class="c1"># 将设备树文件下载到内存地址</span>
</span></span><span class="line"><span class="cl">zynq&gt; tftpboot <span class="m">10080000</span> system.dtb
</span></span><span class="line"><span class="cl"><span class="c1"># 将地址传入bootz命令，启动zImage形式的内核</span>
</span></span><span class="line"><span class="cl">zynq&gt; bootz <span class="m">10000000</span> - <span class="m">10080000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>由于手动编译设备树和内核文件分离，而挂载文件系统部分相似，后续挂载 nfs 见下一章节介绍</li>
</ul>
<h3 id="5-使用-petalinux-工具生成可远程启动镜像">5. 使用 petalinux 工具生成可远程启动镜像</h3>
<p>在执行 petalinux-config 命令需要修改的部分</p>
<ol>
<li>
<p>修改 U-Boot 配置</p>
<p></p>
</li>
<li>
<p>可以修改 netboot offset，即从远程下载镜像到内存中的地址偏移，远程 tftp server 的 IP 地址</p>
</li>
<li>
<p>修改镜像打包相关配置</p>
<p></p>
<p></p>
</li>
<li>
<p>build 整个系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ petalinux-build
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将编译后的输出文件打包成适合部署的格式</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 一般 BOOT.BIN 包含 fsbl 文件、bitstream 和 U-Boot 文件</span>
</span></span><span class="line"><span class="cl">$ petalinux-package --boot --fsbl --fpga --u-boot --force
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<ul>
<li>
<p>其余部分不需要修改，相关根文件系统挂载方式等等配置会生成相关内核参数，内核参数由 U-Boot 在启动时传递给内核</p>
</li>
<li>
<p>这里和之前手动编译生成启动镜像不同，没有下载设备树文件 system.dtb，原因是使用 petalinux 打包的内核镜像 image.ub 中是包含了设备树文件的。因为 image.ub 文件是通过 mkimage 命令制作的，是将内核镜像 zImage 和设备树 system.dtb 打包到一起</p>
</li>
</ul>
<h3 id="6-配置-u-boot-启动-petalinux-编译的内核">6. 配置 U-Boot 启动 petalinux 编译的内核</h3>
<h4 id="基本步骤">基本步骤</h4>
<ul>
<li>
<p>基本步骤和手动编译启动内核一致，在远程 host 上需要具有 nfs 服务器，配置好 nfs 目录，并将根文件系统解压进该目录</p>
</li>
<li>
<p>在设置 IP 地址这一步，U-Boot 会先通过 DHCP 从 server 申请 IP 地址，如果 server 上有 DHCP 服务器，U-Boot 就会自动设置 ipaddr 这个环境变量，可以通过 printenv 打印出所有环境变量，serverip 这个环境变量是在 petalinux 配置阶段设置的</p>
</li>
<li>
<p>netboot 这个环境变量是 U-Boot 设置的，为 <code>tfptboot ${netstart} ${kernel_img} &amp;&amp; bootm</code>, 其中 kernel_img 就是 image.ub</p>
</li>
<li>
<p>步骤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"> <span class="c1"># 设置本机 ip 地址和 host ip 地址</span>
</span></span><span class="line"><span class="cl"> zynq&gt; setenv ipaddr 192.168.138.2
</span></span><span class="line"><span class="cl"> zynq&gt; setenv servimagee通过 tfpt 下载进内存
</span></span><span class="line"><span class="cl"> <span class="c1"># netboot 这个环境变量是 U-Boot 设置的，为 tfptboot ${netstart} ${kernel_img} &amp;&amp; bootm, 其中 kernel_img 就是 image.ub</span>
</span></span><span class="line"><span class="cl"> zynq&gt; run netboot
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="配置默认启动命令">配置默认启动命令</h4>
<ul>
<li>
<p>设置 U-Boot 默认命令，U-Boot 启动后会先配置网络，网络配置完成后就会进入倒计时，倒计时结束执行 bootcmd 中的命令，如果想自动 boot，只需要</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">zynq&gt; setenv bootcmd run netboot
</span></span><span class="line"><span class="cl"><span class="c1"># 保存所有环境变量到 qspi</span>
</span></span><span class="line"><span class="cl">zynq&gt; saveenv
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="配置内核参数环境变量">配置内核参数环境变量</h4>
<ul>
<li>在设备树文件中有一个 chosen 字段，里面设置了内核参数变量 bootargs，U-Boot 中如果不手动配置这个变量，使用的是设备树文件中的内核参数，但是 U-Boot 中的 bootargs 环境变量具有最高优先级</li>
</ul>
<h3 id="挂载-nfs-文件系统">挂载 nfs 文件系统</h3>
<ul>
<li>
<p>决定根文件系统的方式主要是内核的启动参数，配置从 nfs 挂载，bootargs 应该被设置为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># petalinux会根据选项自动配置该变量</span>
</span></span><span class="line"><span class="cl">zynq&gt; setenv bootargs ‘console<span class="o">=</span>ttyPS0,115200 <span class="nv">root</span><span class="o">=</span>/dev/nfs rw <span class="nv">nfsroot</span><span class="o">=</span>192.168.138.1:/home/zynq/linux/nfs/rootfs,tcp <span class="nv">ip</span><span class="o">=</span>dhcp’
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>这个环境变量意义是，根文件系统使用 nfs 的方式以 rw 挂载，根文件系统目录在 <code>192.168.138.1:/home/zynq/linux/nfs/rootfs</code>，本机 ip 地址配置为 dhcp 方式从 server 获取</p>
</li>
<li>
<p>内核启动后会自动挂载 nfs 文件系统，如果挂载成功，内核就会启动完成</p>
</li>
</ul>
<h4 id="在挂载-nfs-时遇到问题内核启动报错">在挂载 nfs 时遇到问题：内核启动报错</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">VFS: Unable to mount root fs via NFS, trying floppy.
</span></span><span class="line"><span class="cl">VFS: Cannot open root device <span class="s2">&#34;nfs&#34;</span> or unknown-block<span class="o">(</span>2,0<span class="o">)</span>: error -6
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="不能成功挂载的原因">不能成功挂载的原因</h4>
<ol>
<li>防火墙问题</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ ufw disable
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>由于 nfs 版本不支持</li>
</ol>
<ul>
<li>目前新安装的 nfs 为 v4 版本，v2 已经废弃，但是很多比较老的内核不支持 v4，可能由于 nfs</li>
</ul>
<h4 id="解决方法">解决方法</h4>
<ol>
<li>
<p>在内核配置中打开 nfs 文件系统对 nfs v4 的支持：</p>
<p><code>&lt;*&gt; NFS client support for NFS version 4</code></p>
<p></p>
</li>
<li>
<p>在 nfs server 端的配置中打开对 nfs v2、nfs v3 和 nfs v4 的支持</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="s1">&#39;RPCNFSDOPTS=&#34;--nfs-version 2,3,4 --debug --syslog&#34;&#39;</span> &gt;&gt; /etc/default/nfs-kernel-server
</span></span><span class="line"><span class="cl">$ systmectl restart nfs-server.service
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Petalinux(一)：安装</title>
    <link>http://gitzhangzhao.github.io/posts/embedeedevr/petalinux/petalinux_1/</link>
    <pubDate>Mon, 19 Jun 2023 11:35:36 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/embedeedevr/petalinux/petalinux_1/</guid>
    <description><![CDATA[<blockquote>
<p>课题需要可能要在 ZYNQ 上多次部署 Linux 并测试，普通的脚本安装方式太过繁琐，Xilinx 的 Petalinux 工具简化了很多流程。这里记录了一些主要步骤，由于实验室 Vivado 版本，所以选择的 Petalinux 版本也不是最新的</p>
</blockquote>
<h3 id="why-petalinux">why petalinux?</h3>
<p>比分步编译更便捷的配置和编译源码</p>
<ul>
<li>
<p>优势：petalinux 读取输入硬件配置，并根据硬件来自动的配置编译 u-boot，kernel，devicetree.</p>
</li>
<li>
<p>缺点：软件对系统版本，依赖版本要求比较高，配置相对麻烦。如果不按照规定好的顺序执行命令会遇上较多未知 BUG</p>
</li>
<li>
<p>目的：简化编译的过程，缩短时间并生成与硬件对应的正确的设备树文件</p>
</li>
</ul>
<h3 id="petalinux-的安装">petalinux 的安装</h3>
<p>petalinux 对操作系统版本和依赖版本要求很高，只能在官方文档指定的发行版安装。这里以 petalinux 2017.04 为例</p>
<ul>
<li>OS: ubuntu16.04(docker x86-64)</li>
<li>Dependencies:</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo dpkg --add-architecture i386
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo apt install libssl-dev flex bison chrpath socat autoconf libtool texinfo gcc-multilib libsdl1.2-dev libglib2.0-dev screen pax net-tools wget diffstat xterm gawk xvfb git make libncurse5-dev tftpd zlib1g libssl-dev gnupg tar unzip build-essential libtool-bin dialog cpio lsb-release zlib1g:i386 zlib1g-dev:i386 locales openjdk-8-jdk
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo dpkg-reconfigure locales
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LANG</span><span class="o">=</span>en_US.UTF-8
</span></span></code></pre></td></tr></table>
</div>
</div><p>由于 Petalinux 依赖发行版版本，推荐采用 Docker 环境安装。请查看 <a href="https://github.com/gitzhangzhao/petalinux_2017.04" target="_blank" rel="noopener noreffer">Petalinux 2017.04 Docker 环境</a></p>
<h3 id="petalinux-的使用">petalinux 的使用</h3>
<ol>
<li>创建一个 ZYNQ 的工程模板：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">petalinux-create --type project --template zynq --name petalinux
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>读取分析硬件所使用的开发版型号来配置：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">petalinux-config --get-hw-description /mnt/linux_base.sdk
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>配置内核和根文件系统：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">petalinux-config -c kernel
</span></span><span class="line"><span class="cl">petalinux-config -c rootfs
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="4">
<li>开始编译：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">petalinux-build
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="5">
<li>将编译好的工程打包输出：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">petalinux-package --boot --fsbl ./images/linux/zynq_fsbl.elf --fpga --u-boot --force
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="6">
<li>使用 qemu 虚拟化平台对产生的 BootLoader 和 linux 内核进行测试（可选）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">petalinux-boot --qemu --prebuilt <span class="m">3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="7">
<li>将输出的文件移动到开发板启动，或者使用 tftp 方式远程启动：
image.ub: linux 的内核镜像，并且打包了设备树文件 plnx_arm-system.dtb, 在内存中运行的文件系统 ramdisk.</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="c1"># image.ub</span>
</span></span><span class="line"><span class="cl"><span class="n">images</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">kernel</span><span class="err">@</span><span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Linux Kernel&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">data</span> <span class="o">=</span> <span class="o">/</span><span class="n">incbin</span><span class="o">/</span><span class="p">(</span><span class="s2">&#34;zImage&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                        <span class="n">type</span> <span class="o">=</span> <span class="s2">&#34;kernel&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">arch</span> <span class="o">=</span> <span class="s2">&#34;arm&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">os</span> <span class="o">=</span> <span class="s2">&#34;linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">compression</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">load</span> <span class="o">=</span> <span class="o">&lt;</span><span class="mh">0x8000</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">entry</span> <span class="o">=</span> <span class="o">&lt;</span><span class="mh">0x8000</span><span class="o">&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">hash</span><span class="err">@</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="n">algo</span> <span class="o">=</span> <span class="s2">&#34;sha1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="n">fdt</span><span class="err">@</span><span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Flattened Device Tree blob&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">data</span> <span class="o">=</span> <span class="o">/</span><span class="n">incbin</span><span class="o">/</span><span class="p">(</span><span class="s2">&#34;plnx_arm-system.dtb&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                        <span class="n">type</span> <span class="o">=</span> <span class="s2">&#34;flat_dt&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">arch</span> <span class="o">=</span> <span class="s2">&#34;arm&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">compression</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">hash</span><span class="err">@</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="n">algo</span> <span class="o">=</span> <span class="s2">&#34;sha1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="n">ramdisk</span><span class="err">@</span><span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                        <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;ramdisk&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">data</span> <span class="o">=</span> <span class="o">/</span><span class="n">incbin</span><span class="o">/</span><span class="p">(</span><span class="s2">&#34;petalinux-user-image-plnx_arm.cpio.gz&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                        <span class="n">type</span> <span class="o">=</span> <span class="s2">&#34;ramdisk&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">arch</span> <span class="o">=</span> <span class="s2">&#34;arm&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">os</span> <span class="o">=</span> <span class="s2">&#34;linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="n">compression</span> <span class="o">=</span> <span class="s2">&#34;none&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="nb">hash</span><span class="err">@</span><span class="mi">1</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="n">algo</span> <span class="o">=</span> <span class="s2">&#34;sha1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                        <span class="p">};</span>
</span></span><span class="line"><span class="cl">                <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="petalinux-产生设备树的分析">petalinux 产生设备树的分析</h3>
<p>使用 petalinux 的优势：自动分析硬件并产生设备树，也可以添加需要的部分并手动编译。</p>
<ul>
<li>产生设备树的目录：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="k">$(</span>project<span class="k">)</span>/components/plnx_workspace/device-tree/device-tree-generation/
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>设备树主要分两个部分：
<ol>
<li>ARM CPU 相关的设备包括处理器内存，系统总线等等，在 zynq-7000.dtsi 中。（dtsi:设备树中描述 SOC 级的信息，一般不需要修改；dts: 设备树的源文件，修改设备树的主要对象；dtb: 由 dts 文件编译生成的二进制文件，由内核在启动时候读取并解析）</li>
<li>petalinux 根据硬件的配置来生成 pl.dtsi 文件，文件内包括在根节点下的 FPGA 部分的设备树。</li>
<li>pl.dtsi 和 zynq-7000.dtsi 包含在 system-top.dts 内，手动添加的设备树也包含在内。</li>
<li>plnx_arm-system.dts 是处理了包含关系后的文件，编译生成 plnx_arm-system.dtb.</li>
</ol>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">pl.dtsi  ---------|
</span></span><span class="line"><span class="cl">pcw.dtsi ---------|----&gt; system-top.dts ----&gt; plnx_arm-system.dts -----(dtc)----&gt; plnx_arm-system.dtb
</span></span><span class="line"><span class="cl">zynq-7000.dtsi ---|
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实验产生-gpio-设备树文件使用-linux-内的-gpio-驱动程序用文件-io-方式驱动-led">实验：产生 GPIO 设备树文件，使用 Linux 内的 gpio 驱动程序，用文件 IO 方式驱动 led</h3>
<p>系统描述：PS 和 PL 各有一个 led，通过 petalinux 产生一个完整 linux 系统，FPGA 端烧写一个 GPIO 控制器，输出 1 位信号到 R19 引脚，FPGA 的 R19 引脚连接了 pl 侧的 led 灯：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-tcl" data-lang="tcl"><span class="line"><span class="cl"><span class="nv">set_property</span> PACKAGE_PIN R19 <span class="k">[</span><span class="nv">get_ports</span> <span class="k">{</span><span class="nv">gpio_out</span><span class="k">}]</span> <span class="err">#</span> R19引脚连接板上的led灯
</span></span><span class="line"><span class="cl"><span class="nv">set_property</span> IOSTANDARD LVCMOS33 <span class="k">[</span><span class="nv">get_ports</span> <span class="k">{</span><span class="nv">gpio_out</span><span class="k">}]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>linux 内核包含了 gpio 的驱动，可以根据设备树信息来自动检测硬件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ <span class="nb">cd</span> /sys/class/gpio <span class="o">&amp;&amp;</span> ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span>  gpiochip906  gpiochip504  unexport
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 访问/sys/class/gpio/目录，gpio906和gpio504分别是PS端和PL端的gpio控制器, export是内核提供的文件用于导出gpio的操作接口。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="m">906</span> &gt; <span class="nb">export</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="m">504</span> &gt; <span class="nb">export</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 向export文件写入GPIO编号，就可以获得这个GPIO的操作接口。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> gpio906 gpiochip906 gpio504 gpiochip504 unexport
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 新产生了gpio906和gpio504目录，目录中就是操作接口。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">cd</span> gpio906 <span class="o">&amp;&amp;</span> ls
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">active_low  direction  power  uevent  device  edge  subsystem  value
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># direction控制gpio的方向，value为gpio的输入输出值。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> out &gt; direction
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="m">1</span> &gt; value          <span class="c1"># led灯灭</span>
</span></span><span class="line"><span class="cl">$ <span class="nb">echo</span> <span class="m">0</span> &gt; value          <span class="c1"># led灯亮</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 通过一般的IO操作value这个文件就可以控制灯的亮灭。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>产生的 GPIO 设备树部分(FPGA 侧):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">axi_gpio_0: gpio@41200000 {
</span></span><span class="line"><span class="cl">			#gpio-cells = &lt;2&gt;;
</span></span><span class="line"><span class="cl">			compatible = &#34;xlnx,xps-gpio-1.00.a&#34;;
</span></span><span class="line"><span class="cl">			gpio-controller ;
</span></span><span class="line"><span class="cl">			reg = &lt;0x41200000 0x10000&gt;;
</span></span><span class="line"><span class="cl">			xlnx,all-inputs = &lt;0x0&gt;;
</span></span><span class="line"><span class="cl">			xlnx,all-inputs-2 = &lt;0x0&gt;;
</span></span><span class="line"><span class="cl">			xlnx,all-outputs = &lt;0x1&gt;;
</span></span><span class="line"><span class="cl">			xlnx,all-outputs-2 = &lt;0x0&gt;;
</span></span><span class="line"><span class="cl">			xlnx,dout-default = &lt;0x00000000&gt;;
</span></span><span class="line"><span class="cl">			xlnx,dout-default-2 = &lt;0x00000000&gt;;
</span></span><span class="line"><span class="cl">			xlnx,gpio-width = &lt;0x1&gt;;
</span></span><span class="line"><span class="cl">			xlnx,gpio2-width = &lt;0x20&gt;;
</span></span><span class="line"><span class="cl">			xlnx,interrupt-present = &lt;0x0&gt;;
</span></span><span class="line"><span class="cl">			xlnx,is-dual = &lt;0x0&gt;;
</span></span><span class="line"><span class="cl">			xlnx,tri-default = &lt;0xFFFFFFFF&gt;;
</span></span><span class="line"><span class="cl">			xlnx,tri-default-2 = &lt;0xFFFFFFFF&gt;;
</span></span><span class="line"><span class="cl">		};
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="实验直接将-fpga-寄存器信号输出到-r19-引脚通过-axi-lite-总线读写寄存器来控制-led">实验：直接将 FPGA 寄存器信号输出到 R19 引脚，通过 AXI-Lite 总线读写寄存器来控制 led</h3>
<p>定义一个 32-bits 寄存器来接受总线信号，写入寄存器的值取一位输出到 led 灯</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-verilog" data-lang="verilog"><span class="line"><span class="cl"><span class="p">#</span> <span class="err">定义一个</span><span class="mh">32</span><span class="err">位寄存器</span>
</span></span><span class="line"><span class="cl"><span class="kt">reg</span> <span class="p">[</span><span class="n">C_S_AXI_DATA_WIDTH</span><span class="o">-</span><span class="mh">1</span><span class="o">:</span><span class="mh">0</span><span class="p">]</span>	<span class="n">slv_reg0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">#</span> <span class="err">将寄存器的第</span><span class="mh">0</span><span class="err">位连接到输出信号</span>
</span></span><span class="line"><span class="cl"><span class="k">assign</span> <span class="n">test_out</span> <span class="o">=</span> <span class="n">slv_reg0</span><span class="p">[</span><span class="mh">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">#</span> <span class="err">将总线模块打包，在</span><span class="n">test中调用AXI总线</span><span class="err">，添加一个输出信号</span><span class="n">test_out</span>
</span></span><span class="line"><span class="cl"><span class="n">myip_v1_0_S00_AXI</span> <span class="p">#</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">C_S_AXI_DATA_WIDTH</span><span class="p">(</span><span class="n">C_S00_AXI_DATA_WIDTH</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">C_S_AXI_ADDR_WIDTH</span><span class="p">(</span><span class="n">C_S00_AXI_ADDR_WIDTH</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span> <span class="n">myip_v1_0_S00_AXI_inst</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_ACLK</span><span class="p">(</span><span class="n">s00_axi_aclk</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_ARESETN</span><span class="p">(</span><span class="n">s00_axi_aresetn</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_AWADDR</span><span class="p">(</span><span class="n">s00_axi_awaddr</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_AWPROT</span><span class="p">(</span><span class="n">s00_axi_awprot</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_AWVALID</span><span class="p">(</span><span class="n">s00_axi_awvalid</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_AWREADY</span><span class="p">(</span><span class="n">s00_axi_awready</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_WDATA</span><span class="p">(</span><span class="n">s00_axi_wdata</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_WSTRB</span><span class="p">(</span><span class="n">s00_axi_wstrb</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_WVALID</span><span class="p">(</span><span class="n">s00_axi_wvalid</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_WREADY</span><span class="p">(</span><span class="n">s00_axi_wready</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_BRESP</span><span class="p">(</span><span class="n">s00_axi_bresp</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_BVALID</span><span class="p">(</span><span class="n">s00_axi_bvalid</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_BREADY</span><span class="p">(</span><span class="n">s00_axi_bready</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_ARADDR</span><span class="p">(</span><span class="n">s00_axi_araddr</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_ARPROT</span><span class="p">(</span><span class="n">s00_axi_arprot</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_ARVALID</span><span class="p">(</span><span class="n">s00_axi_arvalid</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_ARREADY</span><span class="p">(</span><span class="n">s00_axi_arready</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_RDATA</span><span class="p">(</span><span class="n">s00_axi_rdata</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_RRESP</span><span class="p">(</span><span class="n">s00_axi_rresp</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_RVALID</span><span class="p">(</span><span class="n">s00_axi_rvalid</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">S_AXI_RREADY</span><span class="p">(</span><span class="n">s00_axi_rready</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">		<span class="p">.</span><span class="n">test_out</span><span class="p">(</span><span class="n">test_out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">#</span> <span class="err">修改</span><span class="n">wrapper添加输出信号</span>
</span></span><span class="line"><span class="cl"><span class="k">output</span> <span class="kt">wire</span> <span class="n">test_out</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">#</span> <span class="err">绑定输出信号到</span><span class="n">led灯相连的引脚</span>
</span></span><span class="line"><span class="cl"><span class="n">set_property</span> <span class="n">PACKAGE_PIN</span> <span class="n">R19</span> <span class="p">[</span><span class="n">get_ports</span> <span class="p">{</span><span class="n">test_out</span><span class="p">}]</span>
</span></span><span class="line"><span class="cl"><span class="n">set_property</span> <span class="n">IOSTANDARD</span> <span class="n">LVCMOS33</span> <span class="p">[</span><span class="n">get_ports</span> <span class="p">{</span><span class="n">test_out</span><span class="p">}]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>petalinux 根据系统硬件设计添加了 AXI-Lite 总线对应的设备树部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># amba-axi总线的设备树部分
</span></span><span class="line"><span class="cl">/ {
</span></span><span class="line"><span class="cl">	amba_pl: amba_pl {
</span></span><span class="line"><span class="cl">		#address-cells = &lt;1&gt;;
</span></span><span class="line"><span class="cl">		#size-cells = &lt;1&gt;;
</span></span><span class="line"><span class="cl">		compatible = &#34;simple-bus&#34;;
</span></span><span class="line"><span class="cl">		ranges ;
</span></span><span class="line"><span class="cl">		myip_v1_0_0: myip_v1_0@43c00000 {     # 寄存器的物理地址是0x43c00000
</span></span><span class="line"><span class="cl">			compatible = &#34;xlnx,myip-v1-0-1.0&#34;;
</span></span><span class="line"><span class="cl">			reg = &lt;0x43c00000 0x10000&gt;;
</span></span><span class="line"><span class="cl">			xlnx,s00-axi-addr-width = &lt;0x4&gt;;
</span></span><span class="line"><span class="cl">			xlnx,s00-axi-data-width = &lt;0x20&gt;;
</span></span><span class="line"><span class="cl">		};
</span></span><span class="line"><span class="cl">	};
</span></span><span class="line"><span class="cl">};
</span></span></code></pre></td></tr></table>
</div>
</div><p>寄存器的物理地址是 0x43c00000，对这个地址的第一个字节的 0 位写值就可以控制 led 灯的亮灭</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">$ busybox devmem 0x43c00000 <span class="m">8</span> 0x01         <span class="c1"># 灯灭</span>
</span></span><span class="line"><span class="cl">$ busybox devmem 0x43c00000 <span class="m">8</span> 0x00         <span class="c1"># 灯亮</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><del>Q: 最小的寄存器组: 4 个(0x43c00000-0x43c0000f), 从 0x40000000-0x4fffffff 全部被映射到了最初的 16 个字节。</del>
实际上被映射的物理内存区域有 1G，从地址 0x40000000-0x4fffffff</p>
<h3 id="测试从-linux-端读写寄存器寄存器连接一个宽度-16bit深度-256-的-block-ram通过读写-3-个寄存器来实现对-block-ram-的指定地址的读写">测试：从 Linux 端读写寄存器，寄存器连接一个宽度 16bit，深度 256 的 Block RAM，通过读写 3 个寄存器来实现对 Block RAM 的指定地址的读写。</h3>
<p>由一个 TOP 模块，来例化了一个 AXI-Lite 总线接口，这个总线接口定义了 60 个寄存器并且引出。还有一个 BlockRAM 模块，将 AXI 总线定义的三个寄存器输入到 RAM 的控制接口里，然后通过对总线读写来控制 RAM。</p>
<p>AXI 总线模块：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-verilog" data-lang="verilog"><span class="line"><span class="cl"><span class="n">AXI_Lite</span> <span class="n">axi_lite</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       <span class="p">(.</span><span class="n">register00</span><span class="p">(</span><span class="n">AXI_Lite_register00</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register01</span><span class="p">(</span><span class="n">AXI_Lite_register01</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register02</span><span class="p">(</span><span class="n">AXI_Lite_register02</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register03</span><span class="p">(</span><span class="n">AXI_Lite_register03</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register04</span><span class="p">(</span><span class="n">AXI_Lite_register04</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register05</span><span class="p">(</span><span class="n">AXI_Lite_register05</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register06</span><span class="p">(</span><span class="n">AXI_Lite_register06</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register07</span><span class="p">(</span><span class="n">AXI_Lite_register07</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register08</span><span class="p">(</span><span class="n">AXI_Lite_register08</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register09</span><span class="p">(</span><span class="n">AXI_Lite_register09</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">register10</span><span class="p">(</span><span class="n">AXI_Lite_register10</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="p">......</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对 BlockRAM 的接口定义：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-verilog" data-lang="verilog"><span class="line"><span class="cl"><span class="n">bram_wrapper</span> <span class="n">mappingRAM</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="err">写地址：</span><span class="mh">0</span><span class="n">x000</span><span class="o">-</span><span class="mh">0</span><span class="n">x100</span><span class="p">(</span><span class="err">深度</span><span class="mh">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTA_0_addr</span><span class="p">(</span><span class="n">AXI_Lite_register01</span><span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="err">写时钟：</span><span class="n">FCLK_CLK0</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTA_0_clk</span><span class="p">(</span><span class="n">s00_axi_aclk_0_1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="err">写数据：</span><span class="mh">16</span><span class="n">bit数据</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTA_0_din</span><span class="p">(</span><span class="n">AXI_Lite_register02</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="n">PORTA使能</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTA_0_en</span><span class="p">(</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="n">PORTA写使能</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTA_0_we</span><span class="p">(</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="n">PORTB读地址</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTB_0_addr</span><span class="p">(</span><span class="n">AXI_Lite_register03</span><span class="p">[</span><span class="mh">7</span><span class="o">:</span><span class="mh">0</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="n">PORTB读时钟</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTB_0_clk</span><span class="p">(</span><span class="n">s00_axi_aclk_0_1</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="n">PORTB读数据</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTB_0_dout</span><span class="p">(</span><span class="n">w_ramout</span><span class="p">[</span><span class="mh">15</span><span class="o">:</span><span class="mh">0</span><span class="p">]),</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="p">#</span> <span class="n">PORTB读使能</span>
</span></span><span class="line"><span class="cl">        <span class="p">.</span><span class="n">BRAM_PORTB_0_en</span><span class="p">(</span><span class="mh">1</span><span class="mb">&#39;b1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>ramout_0 -&gt; led(R19)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># register
</span></span><span class="line"><span class="cl">  ————————————————————                                       ————————————-
</span></span><span class="line"><span class="cl">  | register01[7:0]  |  ————&gt; 写地址，输入到PORTA addr ——————&gt; |            |
</span></span><span class="line"><span class="cl">  ————————————————————
</span></span><span class="line"><span class="cl">  | register02[15:0] |  ————&gt; 写数据，输入到PORTA din  ——————&gt; |  256 x 16  |
</span></span><span class="line"><span class="cl">  ————————————————————
</span></span><span class="line"><span class="cl">  | register03[7:0]  |  ————&gt; 读地址，输入到PORTB addr ——————&gt; |            |
</span></span><span class="line"><span class="cl">  ————————————————————                                       ————————————-
</span></span><span class="line"><span class="cl">                                                                   |
</span></span><span class="line"><span class="cl">                            ramout[0]       ——————————————         |
</span></span><span class="line"><span class="cl">                  led  &lt;———————————————————| ramout[15:0] |—————————
</span></span><span class="line"><span class="cl">                                            ——————————————
</span></span></code></pre></td></tr></table>
</div>
</div><p>测试过程:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 初始状态：ram内全部清零，ramout[0] 输出为0，&#34;led灯亮&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 给RAM的写地址端口写入0x43c00004</span>
</span></span><span class="line"><span class="cl">$ busybox devmem 0x43c00004 <span class="m">8</span> 0x55
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 给RAM的写数据端口写入16位数据0x0001</span>
</span></span><span class="line"><span class="cl">$ busybox devmem 0x43c00008 <span class="m">16</span> 0x0001
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">此时RAM的0x55地址写入了数据 <span class="m">0000</span> <span class="m">0000</span> <span class="m">0000</span> <span class="m">0001</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 给0x43c0000c地址写入0x55，表示给RAM的读地址端口写0x55</span>
</span></span><span class="line"><span class="cl">$ busybox devmem 0x43c0000c <span class="m">8</span> 0x55
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">此时ramout的第0位由0变成了1，<span class="s2">&#34;led灯灭&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 把0x55的数据重新写为0</span>
</span></span><span class="line"><span class="cl">$ busybox devmem 0x43c00008 <span class="m">16</span> 0x0000
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;led灯亮&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者改变读地址的值</span>
</span></span><span class="line"><span class="cl">$ busybox devmem 0x43c0000c <span class="m">8</span> 0x56
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;led灯亮&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述实验证明数据写入 RAM 成功</p>
]]></description>
</item>
<item>
    <title>Gentoo 安装小记</title>
    <link>http://gitzhangzhao.github.io/posts/linux/gentoo/gentoo/</link>
    <pubDate>Sun, 18 Jun 2023 23:54:08 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/linux/gentoo/gentoo/</guid>
    <description><![CDATA[<h3 id="前言">前言</h3>
<blockquote>
<p>安装 Gentoo 并不复杂，很多人混淆了复杂和耗时。在安装的过程中，大部分的时间都在做别的事情。同时，Gentoo 的安装步骤是清晰的，Handbook 和各路神仙的总结实际上已经很全面了。因此，没有必要再做重复的劳动，一些个性化的关键点记录就足够了。</p>
</blockquote>
<blockquote>
<p>为了使系统保持 Suckless，尽量避免用不到的功能，我还是继续沿用裸 wm 的方式。简而言之：gentoo + openrc + i3wm + polybar + nvim。我的目标是尽量在一天内完成系统的整体安装，再用一周时间进行小修小补。而在流程化的步骤下，一天内的实际安装时间在 1 小时左右，而其余时间都在做其他事情。</p>
</blockquote>
<blockquote>
<p>此外，对于小新 Pro 这种散热垃圾的 Laptop，一个带风扇的散热架是必要的。否则，<code>emerge -e @world</code> 是真的会卡死（哭）。</p>
</blockquote>
<h3 id="安装步骤">安装步骤</h3>
<p>Gentoo 的安装大体上是规范的，但是针对不同用户的需求和理念，也有不一样的方式。或多或少的，存在一些坑</p>
<p>我在安装过程主要参考的几个链接：</p>
<ol>
<li>
<p>官方 Handbook，这是最权威的手册，当问题不确定时，以 Handbook 为准</p>
<p><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/zh-cn" target="_blank" rel="noopener noreffer">Handbook</a></p>
</li>
<li>
<p>一篇较为详细的安装笔记，属于经验丰富的老玩家心得了，很有参考价值</p>
<p><a href="https://zhuanlan.zhihu.com/p/122222365" target="_blank" rel="noopener noreffer">Gentoo 安装流程分享(step by step)，第一篇之基本系统的安装</a></p>
</li>
<li>
<p>OriPoin&rsquo;s blog，详细介绍了 Gentoo 的优化方式，但是没必要采用 O3，会带来很多未知问题</p>
<p><a href="https://blog.oripoin.me/2022/04/emerge-your-world-the-lean-way/" target="_blank" rel="noopener noreffer">Emerge your world the lean way</a></p>
<p><a href="https://blog.oripoin.me/2022/04/optimize-your-system-the-stupid-way/" target="_blank" rel="noopener noreffer">Optimize Your system the stupid way</a></p>
</li>
<li>
<p>bitbili&rsquo;s blog，非常非常详细的介绍了 Gentoo 的安装和使用</p>
<p><a href="https://bitbili.net/gentoo-linux-installation-and-usage-tutorial.html" target="_blank" rel="noopener noreffer">Gentoo Linux 安装及使用指南</a></p>
</li>
<li>
<p>Yangmame 的博客（比较早期）</p>
<p><a href="https://blog.yangmame.org/Gentoo%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener noreffer">Gentoo 安装教程</a></p>
</li>
<li>
<p>ayamir 的知乎记录（参考了 2 和 5）</p>
<p><a href="https://zhuanlan.zhihu.com/p/166652475" target="_blank" rel="noopener noreffer">2020-Gentoo 双系统安装指北</a></p>
</li>
<li>
<p>GTrush 的博客</p>
<p><a href="https://gtrush.com" target="_blank" rel="noopener noreffer">新手 Gentoo 折腾记录 1</a></p>
</li>
<li>
<p>Jioushan 的博客</p>
<p><a href="https://blog.jsmsr.com" target="_blank" rel="noopener noreffer">不完整的 Gentoo 安装</a></p>
</li>
<li>
<p>Google，Stack Overflow，gentoo wiki，arch wiki 等</p>
</li>
</ol>
<h3 id="makeconf">make.conf</h3>
<p>make.conf 可以说是 Gentoo 的核心了，针对 PC 的配置、优化以及对系统的预期基本上都是在这个文件中定义的，首先列出我的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"> <span class="c1"># These settings were set by the catalyst build script that automatically</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># built this stage.</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># Please consult /usr/share/portage/config/make.conf.example for a more</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># detailed example.</span>
</span></span><span class="line"><span class="cl"> <span class="n">COMMON_FLAGS</span><span class="o">=</span><span class="s2">&#34;-march=native -O2 -pipe&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CXXFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">FCFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">FFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">USE</span><span class="o">=</span><span class="s2">&#34;X elogind mount cjk i3wm mpd network pulseaudio ipc opengl dbus -gnome -kde&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">MAKEOPTS</span><span class="o">=</span><span class="s2">&#34;-j6&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">LC_MESSAGES</span><span class="o">=</span><span class="n">C</span>
</span></span><span class="line"><span class="cl"> <span class="n">EMERGE_DEFAULT_OPTS</span><span class="o">=</span><span class="s2">&#34;--ask --verbose --load-average --newuse --with-bdeps=y --keep-going --deep&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CPU_FLAGS_X86</span><span class="o">=</span><span class="s2">&#34;aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_1 sse4_2 ssse3&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">AUTO_CLEAN</span><span class="o">=</span><span class="s2">&#34;yes&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">PORTDIR</span><span class="o">=</span><span class="s2">&#34;/var/db/repos/gentoo&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">DISTDIR</span><span class="o">=</span><span class="s2">&#34;/var/cache/distfiles&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">PKGDIR</span><span class="o">=</span><span class="s2">&#34;/var/chache/binpkgs&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">PORTAGE_TMPDIR</span><span class="o">=</span><span class="s2">&#34;/tmp&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">PORTAGE_COMPRESS</span><span class="o">=</span><span class="s2">&#34;zstd&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">BINPKG_COMPRESS</span><span class="o">=</span><span class="s2">&#34;zstd&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">ACCEPT_LICENSE</span><span class="o">=</span><span class="s2">&#34;*&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">ACCEPT_KEYWORDS</span><span class="o">=</span><span class="s2">&#34;~amd64&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">GRUB_PLATFORMS</span><span class="o">=</span><span class="s2">&#34;efi-64&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">VIDEO_CARDS</span><span class="o">=</span><span class="s2">&#34;nouveau&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">GENTOO_MIRRORS</span><span class="o">=</span><span class="s2">&#34;https://mirrors.tuna.tsinghua.edu.cn/gentoo&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">MICROCODE_SIGNATURES</span><span class="o">=</span><span class="s2">&#34;-S&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># NOTE: This stage was built with the bindist Use flag enabled</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># This sets the language of build output to English.</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># Please keep this setting intact when reporting bugs.</span>
</span></span><span class="line"><span class="cl"> <span class="n">LC_MESSAGES</span><span class="o">=</span><span class="n">C</span><span class="o">.</span><span class="n">utf8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># ccache</span>
</span></span><span class="line"><span class="cl"> <span class="n">FEATURES</span><span class="o">=</span><span class="s2">&#34;ccache -test&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CCACHE_DIR</span><span class="o">=</span><span class="s2">&#34;/var/cache/ccache&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># aria2</span>
</span></span><span class="line"><span class="cl"> <span class="n">FETCHCOMMAND</span><span class="o">=</span><span class="s2">&#34;/usr/bin/aria2c -d \${DISTDIR} -o \${FILE} --allow-overwrite=true --max-tries=5 --max-file-not-found=2 --max-concurrent-downloads=5 --connect-timeout=5 --timeout=5 --split=5 --min-split-size=2M --lowest-speed-limit=20K --max-connection-per-server=9 --uri-selector=feedback \${URI}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">RESUMECOMMAND</span><span class="o">=</span><span class="s2">&#34;${FETCHCOMMAND}&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="问题列举">问题列举</h3>
<blockquote>
<p>安装 Gentoo 是相对容易的，但是往往会遇上很多奇怪的问题。比如常见的循环依赖，某个程序编译失败&hellip;
这种时候首先应该去 Gentoo Package 查找对应包是否有 Bug 记录，以及解决方法
这里主要列举的是我在安装过程中遇到的问题，以及解决方法</p>
</blockquote>
<h4 id="复杂密码换简单密码">复杂密码换简单密码</h4>
<ul>
<li>
<p>Gentoo 默认是复杂密码，为了便于日常使用，改为简单密码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/etc/security/passwdqc.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">min=8,8,8,8,8
</span></span><span class="line"><span class="cl">max=40
</span></span><span class="line"><span class="cl">passphrase=0
</span></span><span class="line"><span class="cl">match=4
</span></span><span class="line"><span class="cl">similar=permit
</span></span><span class="line"><span class="cl">random=24
</span></span><span class="line"><span class="cl">enforce=none
</span></span><span class="line"><span class="cl">retry=3
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者全局 USE -pam，我还没有尝试</p>
</li>
</ul>
<h4 id="eudev-还是-systemd-utils">eudev 还是 systemd-utils？</h4>
<p>Gentoo 目前用 systemd-utils 替代了原本的 eudev，所以解决办法有：</p>
<ol>
<li>使用 systemd-utils 管理设备，不要再安装 eudev，这是最简单的。官方的原话是：<code>in general, you should not worry about installing anything *udev manually by yourself and you should imho not have anything like that in your world file.</code></li>
<li>如果你痛恨和 systemd 有关的一切，可以为 systemd-utils 包-udev USE，然后应该就可以安装 eudev 了。需要注意的是，eudev 不应该被加入到 world file 中。此外还有一些其他的 USE 也会影响，总之这很麻烦。建议还是不要折腾了，systemd-utils 只是从 systemd 中分离出来的组件而已，它包含了 udev</li>
</ol>
<h4 id="desktop-profiles">Desktop profiles？</h4>
<p>Desktop profiles 预设了很多 USE，并包含了一些 system 依赖。对于 KDE 和 GNOME 用户，Desktop profiles 中提供的增量可以省很多事。但是对于裸 WM 来说，没有必要为使用 Desktop，默认的 profiles 或者 systemd profiles 就可以了。在最小化的基础上，安装软件时检查 USE 并逐步添加自己的全局 USE</p>
<h4 id="tmp-挂载">/tmp 挂载</h4>
<p>有时候 fstab 中会忘记挂载/tmp，这样/tmp 目录在磁盘中，在 portage 运行时主要以/tmp 作为暂存目录，可能会反复读写 SSD 降低寿命。将/tmp 挂载到内存中，毕竟内存更加皮实耐用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># size 的大小一般为内存大小的一半
</span></span><span class="line"><span class="cl">tmpfs /tmp tmpfs rw,nosuid,noatime,nodev,size=16G,mode=1777 0 0
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="循环依赖问题">循环依赖问题</h4>
<p>是在安装 polybar 的时候遇到了这个问题，其他人反应 vim 也有这个循环依赖。貌似不是个别人遇到的问题</p>
<p>循环依赖问题：循环依赖可以是多个，比如：A 依赖 B，B 依赖 C，而 C 又依赖 A。而在此过程中，A 的 USE 会对 B 造成影响，而 B 又对 C 造成影响，这种影响可以是+或者- USE。但是 C 又依赖了 A，与 A 的新 USE 冲突</p>
<p>如下报错信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"> <span class="o">*</span> <span class="nx">Error</span><span class="p">:</span> <span class="nx">circular</span> <span class="nx">dependencies</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libsndfile</span><span class="o">-</span><span class="mf">1.2.0</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="nx">depends</span> <span class="nf">on</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">sound</span><span class="o">/</span><span class="nx">mpg123</span><span class="o">-</span><span class="mf">1.31.3</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime_slot_op</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">sound</span><span class="o">/</span><span class="nx">pulseaudio</span><span class="o">-</span><span class="mf">16.1</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libpulse</span><span class="o">-</span><span class="mf">16.1</span><span class="o">-</span><span class="nx">r2</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libsndfile</span><span class="o">-</span><span class="mf">1.2.0</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">It</span> <span class="nx">might</span> <span class="nx">be</span> <span class="nx">possible</span> <span class="nx">to</span> <span class="k">break</span> <span class="nx">this</span> <span class="nx">cycle</span>
</span></span><span class="line"><span class="cl"><span class="nx">by</span> <span class="nx">applying</span> <span class="nx">any</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">changes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libsndfile</span><span class="o">-</span><span class="mf">1.2.0</span> <span class="p">(</span><span class="nx">Change</span> <span class="nx">USE</span><span class="p">:</span> <span class="o">+</span><span class="nx">minimal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="nx">media</span><span class="o">-</span><span class="nx">sound</span><span class="o">/</span><span class="nx">mpg123</span><span class="o">-</span><span class="mf">1.31.3</span> <span class="p">(</span><span class="nx">Change</span> <span class="nx">USE</span><span class="p">:</span> <span class="o">-</span><span class="nx">pulseaudio</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">Note</span> <span class="nx">that</span> <span class="nx">this</span> <span class="nx">change</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">reverted</span><span class="p">,</span> <span class="nx">once</span> <span class="nx">the</span> <span class="kn">package</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">installed</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">Note</span> <span class="nx">that</span> <span class="nx">the</span> <span class="nx">dependency</span> <span class="nx">graph</span> <span class="nx">contains</span> <span class="nx">a</span> <span class="nx">lot</span> <span class="nx">of</span> <span class="nx">cycles</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nx">Several</span> <span class="nx">changes</span> <span class="nx">might</span> <span class="nx">be</span> <span class="nx">required</span> <span class="nx">to</span> <span class="nx">resolve</span> <span class="nx">all</span> <span class="nx">cycles</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nx">Temporarily</span> <span class="nx">changing</span> <span class="nx">some</span> <span class="nx">use</span> <span class="nx">flag</span> <span class="k">for</span> <span class="nx">all</span> <span class="nx">packages</span> <span class="nx">might</span> <span class="nx">be</span> <span class="nx">the</span> <span class="nx">better</span> <span class="nx">option</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 首先打破循环依赖，-1(oneshot) 避免把包写入 world 文件</span>
</span></span><span class="line"><span class="cl"><span class="nv">USE</span><span class="o">=</span><span class="s2">&#34;-pulseaudio&#34;</span> emerge -1 media-sound/mpg123
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 polybar，Global USE 定义了 pulseaudio</span>
</span></span><span class="line"><span class="cl">emerge polybar
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 成功安装后，再恢复以前的状态</span>
</span></span><span class="line"><span class="cl"><span class="nv">USE</span><span class="o">=</span><span class="s2">&#34;pulseaudio&#34;</span> emerge -1 media-sound/mpg123
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<hr>
<p><strong>由于日常维护和debug太耗时，目前已放弃 Gentoo，此文章结束</strong></p>
]]></description>
</item>
</channel>
</rss>
