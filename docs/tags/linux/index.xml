<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - 标签 - 张昭的Blog</title>
        <link>http://gitzhangzhao.github.io/tags/linux/</link>
        <description>Linux - 标签 - 张昭的Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>gitzhangzhao@gmail.com (张昭)</managingEditor>
            <webMaster>gitzhangzhao@gmail.com (张昭)</webMaster><lastBuildDate>Sat, 11 May 2024 10:53:01 &#43;0800</lastBuildDate><atom:link href="http://gitzhangzhao.github.io/tags/linux/" rel="self" type="application/rss+xml" /><item>
    <title>U-Boot启动流程分析</title>
    <link>http://gitzhangzhao.github.io/posts/linux/u-boot/</link>
    <pubDate>Sat, 11 May 2024 10:53:01 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/linux/u-boot/</guid>
    <description><![CDATA[<p><strong>前言</strong></p>
<p>本文将以 arm 为例结合 u-boot 的<code>board—&gt;machine—&gt;arch—&gt;cpu</code>框架，介绍在 aspeed 平台下， uboot-spl 启动双系统的流程</p>
<h2 id="前置知识">前置知识</h2>
<p>u-boot 的启动流程大体可以分为两个部分：<strong>平台无关部分</strong>和<strong>平台相关部分</strong>。平台无关部分主要包括 u-boot 的主初始化流程，如初始化 BSS 段，设置栈，初始化硬件（如 DDR，时钟，串口等）等。这一部分的流程对于所有平台都是相同的，是 u-boot 的通用启动流程。而平台相关部分则涉及到特定硬件平台的初始化细节，如特定的内存布局，特定的外设初始化等，如下图所示：</p>
<p></p>
<ol>
<li>u-boot 启动后，会先执行 CPU 初始化代码</li>
<li>CPU 相关的代码，会调用 ARCH 的公共代码（如 arch/arm）</li>
<li>ARCH 的公共代码，在适当的时候，调用 board 有关的接口。u-boot 的功能逻辑，大多是由 common 代码实现，部分和平台有关的部分，则由公共代码声明，由 board 代码实现</li>
<li>board 代码在需要的时候，会调用 machine（arch/arm/mach-xxx）提供的接口，实现特定的功能。因此 machine 的定位是提供一些基础的代码支持，不会直接参与到 u-boot 的功能逻辑中</li>
</ol>
<h2 id="一般平台启动流程">一般平台启动流程</h2>
<p>uboot 的启动流程从<code>arch/arm/cpu/armv7/start.S</code>中的 reset vector 开始，这是所有 ARM 程序的入口点，完成下面工作：</p>
<ol>
<li>save board registers</li>
<li>disable interrupts</li>
<li>setup CP15 寄存器（cache、MMU）</li>
<li>跳转到<code>cpu_init_crit</code>进行关键初始化，如 memory</li>
<li>跳转到<code>_main</code>，设置 C 运行环境，准备调用<code>board_init_f</code></li>
<li>board_init_f 函数，完成一些前期的初始化工作，包括点灯、init DDR 等</li>
<li>跳转到<code>board_init_r</code>，进入更高级别的初始化，包括设备树的处理，驱动的初始化，命令行的处理等（spl 调用不同的 board_init_r 实现）</li>
</ol>
<p></p>
<p>uboot 和 uboot-spl 代码是共用的，在 spl 的实现中，<code>board_init_f</code> 函数完成之后，流程才会继续执行 u-boot 映像。因此，SPL 需要完成的所有工作都应该放在 <code>board_init_f</code> 函数中执行。这包括启动 RTOS，它也应当在 <code>board_init_f</code> 中进行初始化，以确保顺利过渡到引导流程的后续阶段。</p>
<h2 id="uboot-spl-双系统启动流程">uboot-spl 双系统启动流程</h2>
<h3 id="1-_startarcharmlibvectors">1. _start(arch/arm/lib/vector.S)</h3>
<p>_start 是整个 spl 的入口，首先执行 <code>u-boot/arch/arm/lib/vector.S</code>的<code>_start</code>，然后跳转到<code>start.S</code>的<code>reset</code>，然后的流程和 uboot 一致
uboot-spl 在链接脚本<code>u-boot-spl.lds</code>中定义了 spl 的入口函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl">ENTRY<span class="err">(_start)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span>ifdef <span class="err">CONFIG_ARCH_K3</span>
</span></span><span class="line"><span class="cl">    ldr    <span class="err">pc</span>, <span class="err">_reset</span>
</span></span><span class="line"><span class="cl"><span class="err">#</span>end
</span></span><span class="line"><span class="cl">    b      <span class="err">reset</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>spl 的流程在 reset 中就应该被结束，reset 最后应该转到 BL2，也就是 uboot 中了</p>
<h3 id="2-resetarcharmcpuarmv7starts">2. reset(arch/arm/cpu/armv7/start.S)</h3>
<h4 id="21-关闭中断">2.1 关闭中断</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl"><span class="nl">reset</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl"><span class="err">/*</span>
</span></span><span class="line"><span class="cl">     <span class="err">*</span> disable <span class="err">interrupts</span> <span class="err">(FIQ</span> <span class="err">and</span> <span class="err">IRQ)</span>, <span class="err">also</span> <span class="err">set</span> <span class="err">the</span> <span class="err">cpu</span> <span class="err">to</span> <span class="err">SVC32</span> <span class="err">mode</span>,
</span></span><span class="line"><span class="cl">     <span class="err">*</span> except <span class="err">if</span> <span class="err">in</span> <span class="err">HYP</span> <span class="err">mode</span> <span class="err">already</span>
</span></span><span class="line"><span class="cl">     <span class="err">*/</span>
</span></span><span class="line"><span class="cl">    mrs <span class="nc">r0</span>, <span class="err">cpsr</span>
</span></span><span class="line"><span class="cl">    and <span class="nc">r1</span>, <span class="nc">r0</span>, #<span class="mh">0x1f</span>       <span class="c1">@ mask mode bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    teq <span class="nc">r1</span>, #<span class="mh">0x1a</span>       <span class="c1">@ test for HYP mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    bicne   <span class="nc">r0</span>, <span class="nc">r0</span>, #<span class="mh">0x1f</span>       <span class="c1">@ clear all mode bits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    orrne   <span class="nc">r0</span>, <span class="nc">r0</span>, #<span class="mh">0x13</span>       <span class="c1">@ set SVC mode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    orr <span class="nc">r0</span>, <span class="nc">r0</span>, #<span class="mh">0xc0</span>       <span class="c1">@ disable FIQ and IRQ
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    msr <span class="err">cpsr</span>,<span class="nc">r0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="22-cpu_init_cp15">2.2 cpu_init_cp15</h4>
<p>关闭中断后，跳转到<code>cpu_init_cp15</code>，关闭 MMU，关闭 caches，关闭 MMU 权限检查，关闭 MMU 异常处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl"><span class="nl">reset</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">bl <span class="err">cpu_init_c</span><span class="nc">p15</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="23-cpu_init_crit">2.3 cpu_init_crit</h4>
<p>跳转到<code>cpu_init_crit</code>函数，进行重要寄存器和内存时序的配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl"><span class="nl">reset</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">bl <span class="err">cpu_init_crit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>cpu_init_crit</code>中，跳转到<code>lowlevel_init</code>函数，配置 pll、mux 和 memory</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl">ENTRY<span class="err">(cpu_init_crit)</span>
</span></span><span class="line"><span class="cl">    bl <span class="err">lowlevel_init</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-lowlevel_initarcharmmach-aspeedast2600platforms">3. lowlevel_init(arch/arm/mach-aspeed/ast2600/platform.S)</h3>
<p>u-boot 默认的 lowlevel_init 函数是在<code>arch/arm/cpu/armv7/lowlevel_init.S</code>中定义的，但是定义为弱符号链接（.weak），该实现由板级代码<code>arch/arm/mach-aspeed/ast2600/platform.S</code>中定义的<code>lowlevel_init</code>函数替代</p>
<p>完成<code>lowlevel_init</code>函数后，return <code>reset</code>(arch/arm/cpu/armv7/start.S)并跳转到<code>_main</code>函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl"><span class="c1">@ arch/arm/cpu/armv7/start.S
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">reset</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">...</span>
</span></span><span class="line"><span class="cl">bl <span class="err">_main</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-mainarchlibcrt0s">4. main(arch/lib/crt0.S)</h3>
<h4 id="41-c-运行时初始化">4.1 C 运行时初始化</h4>
<p>堆栈、GD、early malloc 空间的分配</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-armasm" data-lang="armasm"><span class="line"><span class="cl"><span class="nl">_main</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">    bl <span class="err">board_init_f_alloc_reserve</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span><span class="line"><span class="cl">    bl <span class="err">board_init_f_init_reserve</span>
</span></span><span class="line"><span class="cl">    <span class="err">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="42-board_init_f">4.2 board_init_f</h4>
<p>relocate 前的初始化，以弱符号链接定义在<code>arch/arm/lib/spl.c</code>中,实现在不同的板级代码中。在 ast2600 上，<code>board_init_f</code>实现在<code>arch/arm/mach-aspeed/ast2600/spl.c</code>中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">board_init_f</span><span class="p">(</span><span class="n">ulong</span> <span class="n">dummy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">spl_early_init</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">timer_init</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">preloader_console_init</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">dram_init</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="nf">aspeed_mmc_init</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#ifdef CONFIG_SPX_FEATURE_FREERTOS_SUPPORT
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="nf">rtos_init</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="cp">#endif
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>rtos 在<code>board_init_f</code>中进行初始化</p>
]]></description>
</item>
<item>
    <title>Gentoo 安装小记</title>
    <link>http://gitzhangzhao.github.io/posts/linux/gentoo/</link>
    <pubDate>Sun, 18 Jun 2023 23:54:08 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/linux/gentoo/</guid>
    <description><![CDATA[<h3 id="前言">前言</h3>
<blockquote>
<p>安装 Gentoo 并不复杂，很多人混淆了复杂和耗时。在安装的过程中，大部分的时间都在做别的事情。同时，Gentoo 的安装步骤是清晰的，Handbook 和各路神仙的总结实际上已经很全面了。因此，没有必要再做重复的劳动，一些个性化的关键点记录就足够了。</p>
</blockquote>
<blockquote>
<p>为了使系统保持 Suckless，尽量避免用不到的功能，我还是继续沿用裸 wm 的方式。简而言之：gentoo + openrc + i3wm + polybar + nvim。我的目标是尽量在一天内完成系统的整体安装，再用一周时间进行小修小补。而在流程化的步骤下，一天内的实际安装时间在 1 小时左右，而其余时间都在做其他事情。</p>
</blockquote>
<blockquote>
<p>此外，对于小新 Pro 这种散热垃圾的 Laptop，一个带风扇的散热架是必要的。否则，<code>emerge -e @world</code> 是真的会卡死（哭）。</p>
</blockquote>
<h3 id="安装步骤">安装步骤</h3>
<p>Gentoo 的安装大体上是规范的，但是针对不同用户的需求和理念，也有不一样的方式。或多或少的，存在一些坑</p>
<p>我在安装过程主要参考的几个链接：</p>
<ol>
<li>
<p>官方 Handbook，这是最权威的手册，当问题不确定时，以 Handbook 为准</p>
<p><a href="https://wiki.gentoo.org/wiki/Handbook:AMD64/zh-cn" target="_blank" rel="noopener noreffer">Handbook</a></p>
</li>
<li>
<p>一篇较为详细的安装笔记，属于经验丰富的老玩家心得了，很有参考价值</p>
<p><a href="https://zhuanlan.zhihu.com/p/122222365" target="_blank" rel="noopener noreffer">Gentoo 安装流程分享(step by step)，第一篇之基本系统的安装</a></p>
</li>
<li>
<p>OriPoin&rsquo;s blog，详细介绍了 Gentoo 的优化方式，但是没必要采用 O3，会带来很多未知问题</p>
<p><a href="https://blog.oripoin.me/2022/04/emerge-your-world-the-lean-way/" target="_blank" rel="noopener noreffer">Emerge your world the lean way</a></p>
<p><a href="https://blog.oripoin.me/2022/04/optimize-your-system-the-stupid-way/" target="_blank" rel="noopener noreffer">Optimize Your system the stupid way</a></p>
</li>
<li>
<p>bitbili&rsquo;s blog，非常非常详细的介绍了 Gentoo 的安装和使用</p>
<p><a href="https://bitbili.net/gentoo-linux-installation-and-usage-tutorial.html" target="_blank" rel="noopener noreffer">Gentoo Linux 安装及使用指南</a></p>
</li>
<li>
<p>Yangmame 的博客（比较早期）</p>
<p><a href="https://blog.yangmame.org/Gentoo%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener noreffer">Gentoo 安装教程</a></p>
</li>
<li>
<p>ayamir 的知乎记录（参考了 2 和 5）</p>
<p><a href="https://zhuanlan.zhihu.com/p/166652475" target="_blank" rel="noopener noreffer">2020-Gentoo 双系统安装指北</a></p>
</li>
<li>
<p>GTrush 的博客</p>
<p><a href="https://gtrush.com" target="_blank" rel="noopener noreffer">新手 Gentoo 折腾记录 1</a></p>
</li>
<li>
<p>Jioushan 的博客</p>
<p><a href="https://blog.jsmsr.com" target="_blank" rel="noopener noreffer">不完整的 Gentoo 安装</a></p>
</li>
<li>
<p>Google，Stack Overflow，gentoo wiki，arch wiki 等</p>
</li>
</ol>
<h3 id="makeconf">make.conf</h3>
<p>make.conf 可以说是 Gentoo 的核心了，针对 PC 的配置、优化以及对系统的预期基本上都是在这个文件中定义的，首先列出我的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"> <span class="c1"># These settings were set by the catalyst build script that automatically</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># built this stage.</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># Please consult /usr/share/portage/config/make.conf.example for a more</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># detailed example.</span>
</span></span><span class="line"><span class="cl"> <span class="n">COMMON_FLAGS</span><span class="o">=</span><span class="s2">&#34;-march=native -O2 -pipe&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CXXFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">FCFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">FFLAGS</span><span class="o">=</span><span class="s2">&#34;${COMMON_FLAGS}&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">USE</span><span class="o">=</span><span class="s2">&#34;X elogind mount cjk i3wm mpd network pulseaudio ipc opengl dbus -gnome -kde&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">MAKEOPTS</span><span class="o">=</span><span class="s2">&#34;-j6&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">LC_MESSAGES</span><span class="o">=</span><span class="n">C</span>
</span></span><span class="line"><span class="cl"> <span class="n">EMERGE_DEFAULT_OPTS</span><span class="o">=</span><span class="s2">&#34;--ask --verbose --load-average --newuse --with-bdeps=y --keep-going --deep&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CPU_FLAGS_X86</span><span class="o">=</span><span class="s2">&#34;aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_1 sse4_2 ssse3&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">AUTO_CLEAN</span><span class="o">=</span><span class="s2">&#34;yes&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">PORTDIR</span><span class="o">=</span><span class="s2">&#34;/var/db/repos/gentoo&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">DISTDIR</span><span class="o">=</span><span class="s2">&#34;/var/cache/distfiles&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">PKGDIR</span><span class="o">=</span><span class="s2">&#34;/var/chache/binpkgs&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">PORTAGE_TMPDIR</span><span class="o">=</span><span class="s2">&#34;/tmp&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">PORTAGE_COMPRESS</span><span class="o">=</span><span class="s2">&#34;zstd&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">BINPKG_COMPRESS</span><span class="o">=</span><span class="s2">&#34;zstd&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">ACCEPT_LICENSE</span><span class="o">=</span><span class="s2">&#34;*&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">ACCEPT_KEYWORDS</span><span class="o">=</span><span class="s2">&#34;~amd64&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">GRUB_PLATFORMS</span><span class="o">=</span><span class="s2">&#34;efi-64&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">VIDEO_CARDS</span><span class="o">=</span><span class="s2">&#34;nouveau&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">GENTOO_MIRRORS</span><span class="o">=</span><span class="s2">&#34;https://mirrors.tuna.tsinghua.edu.cn/gentoo&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">MICROCODE_SIGNATURES</span><span class="o">=</span><span class="s2">&#34;-S&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># NOTE: This stage was built with the bindist Use flag enabled</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># This sets the language of build output to English.</span>
</span></span><span class="line"><span class="cl"> <span class="c1"># Please keep this setting intact when reporting bugs.</span>
</span></span><span class="line"><span class="cl"> <span class="n">LC_MESSAGES</span><span class="o">=</span><span class="n">C</span><span class="o">.</span><span class="n">utf8</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># ccache</span>
</span></span><span class="line"><span class="cl"> <span class="n">FEATURES</span><span class="o">=</span><span class="s2">&#34;ccache -test&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">CCACHE_DIR</span><span class="o">=</span><span class="s2">&#34;/var/cache/ccache&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># aria2</span>
</span></span><span class="line"><span class="cl"> <span class="n">FETCHCOMMAND</span><span class="o">=</span><span class="s2">&#34;/usr/bin/aria2c -d \${DISTDIR} -o \${FILE} --allow-overwrite=true --max-tries=5 --max-file-not-found=2 --max-concurrent-downloads=5 --connect-timeout=5 --timeout=5 --split=5 --min-split-size=2M --lowest-speed-limit=20K --max-connection-per-server=9 --uri-selector=feedback \${URI}&#34;</span>
</span></span><span class="line"><span class="cl"> <span class="n">RESUMECOMMAND</span><span class="o">=</span><span class="s2">&#34;${FETCHCOMMAND}&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="问题列举">问题列举</h3>
<blockquote>
<p>安装 Gentoo 是相对容易的，但是往往会遇上很多奇怪的问题。比如常见的循环依赖，某个程序编译失败&hellip;
这种时候首先应该去 Gentoo Package 查找对应包是否有 Bug 记录，以及解决方法
这里主要列举的是我在安装过程中遇到的问题，以及解决方法</p>
</blockquote>
<h4 id="复杂密码换简单密码">复杂密码换简单密码</h4>
<ul>
<li>
<p>Gentoo 默认是复杂密码，为了便于日常使用，改为简单密码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">/etc/security/passwdqc.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">min=8,8,8,8,8
</span></span><span class="line"><span class="cl">max=40
</span></span><span class="line"><span class="cl">passphrase=0
</span></span><span class="line"><span class="cl">match=4
</span></span><span class="line"><span class="cl">similar=permit
</span></span><span class="line"><span class="cl">random=24
</span></span><span class="line"><span class="cl">enforce=none
</span></span><span class="line"><span class="cl">retry=3
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者全局 USE -pam，我还没有尝试</p>
</li>
</ul>
<h4 id="eudev-还是-systemd-utils">eudev 还是 systemd-utils？</h4>
<p>Gentoo 目前用 systemd-utils 替代了原本的 eudev，所以解决办法有：</p>
<ol>
<li>使用 systemd-utils 管理设备，不要再安装 eudev，这是最简单的。官方的原话是：<code>in general, you should not worry about installing anything *udev manually by yourself and you should imho not have anything like that in your world file.</code></li>
<li>如果你痛恨和 systemd 有关的一切，可以为 systemd-utils 包-udev USE，然后应该就可以安装 eudev 了。需要注意的是，eudev 不应该被加入到 world file 中。此外还有一些其他的 USE 也会影响，总之这很麻烦。建议还是不要折腾了，systemd-utils 只是从 systemd 中分离出来的组件而已，它包含了 udev</li>
</ol>
<h4 id="desktop-profiles">Desktop profiles？</h4>
<p>Desktop profiles 预设了很多 USE，并包含了一些 system 依赖。对于 KDE 和 GNOME 用户，Desktop profiles 中提供的增量可以省很多事。但是对于裸 WM 来说，没有必要为使用 Desktop，默认的 profiles 或者 systemd profiles 就可以了。在最小化的基础上，安装软件时检查 USE 并逐步添加自己的全局 USE</p>
<h4 id="tmp-挂载">/tmp 挂载</h4>
<p>有时候 fstab 中会忘记挂载/tmp，这样/tmp 目录在磁盘中，在 portage 运行时主要以/tmp 作为暂存目录，可能会反复读写 SSD 降低寿命。将/tmp 挂载到内存中，毕竟内存更加皮实耐用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># size 的大小一般为内存大小的一半
</span></span><span class="line"><span class="cl">tmpfs /tmp tmpfs rw,nosuid,noatime,nodev,size=16G,mode=1777 0 0
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="循环依赖问题">循环依赖问题</h4>
<p>是在安装 polybar 的时候遇到了这个问题，其他人反应 vim 也有这个循环依赖。貌似不是个别人遇到的问题</p>
<p>循环依赖问题：循环依赖可以是多个，比如：A 依赖 B，B 依赖 C，而 C 又依赖 A。而在此过程中，A 的 USE 会对 B 造成影响，而 B 又对 C 造成影响，这种影响可以是+或者- USE。但是 C 又依赖了 A，与 A 的新 USE 冲突</p>
<p>如下报错信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"> <span class="o">*</span> <span class="nx">Error</span><span class="p">:</span> <span class="nx">circular</span> <span class="nx">dependencies</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libsndfile</span><span class="o">-</span><span class="mf">1.2.0</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="nx">depends</span> <span class="nf">on</span>
</span></span><span class="line"><span class="cl"> <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">sound</span><span class="o">/</span><span class="nx">mpg123</span><span class="o">-</span><span class="mf">1.31.3</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime_slot_op</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">sound</span><span class="o">/</span><span class="nx">pulseaudio</span><span class="o">-</span><span class="mf">16.1</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libpulse</span><span class="o">-</span><span class="mf">16.1</span><span class="o">-</span><span class="nx">r2</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libsndfile</span><span class="o">-</span><span class="mf">1.2.0</span><span class="p">:</span><span class="mi">0</span><span class="o">/</span><span class="mi">0</span><span class="p">::</span><span class="nx">gentoo</span><span class="p">,</span> <span class="nx">ebuild</span> <span class="nx">scheduled</span> <span class="k">for</span> <span class="nx">merge</span><span class="p">)</span> <span class="p">(</span><span class="nx">buildtime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">It</span> <span class="nx">might</span> <span class="nx">be</span> <span class="nx">possible</span> <span class="nx">to</span> <span class="k">break</span> <span class="nx">this</span> <span class="nx">cycle</span>
</span></span><span class="line"><span class="cl"><span class="nx">by</span> <span class="nx">applying</span> <span class="nx">any</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">following</span> <span class="nx">changes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="nx">media</span><span class="o">-</span><span class="nx">libs</span><span class="o">/</span><span class="nx">libsndfile</span><span class="o">-</span><span class="mf">1.2.0</span> <span class="p">(</span><span class="nx">Change</span> <span class="nx">USE</span><span class="p">:</span> <span class="o">+</span><span class="nx">minimal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="nx">media</span><span class="o">-</span><span class="nx">sound</span><span class="o">/</span><span class="nx">mpg123</span><span class="o">-</span><span class="mf">1.31.3</span> <span class="p">(</span><span class="nx">Change</span> <span class="nx">USE</span><span class="p">:</span> <span class="o">-</span><span class="nx">pulseaudio</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">Note</span> <span class="nx">that</span> <span class="nx">this</span> <span class="nx">change</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">reverted</span><span class="p">,</span> <span class="nx">once</span> <span class="nx">the</span> <span class="kn">package</span> <span class="nx">has</span> <span class="nx">been</span> <span class="nx">installed</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="err">​</span>
</span></span><span class="line"><span class="cl"><span class="nx">Note</span> <span class="nx">that</span> <span class="nx">the</span> <span class="nx">dependency</span> <span class="nx">graph</span> <span class="nx">contains</span> <span class="nx">a</span> <span class="nx">lot</span> <span class="nx">of</span> <span class="nx">cycles</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nx">Several</span> <span class="nx">changes</span> <span class="nx">might</span> <span class="nx">be</span> <span class="nx">required</span> <span class="nx">to</span> <span class="nx">resolve</span> <span class="nx">all</span> <span class="nx">cycles</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nx">Temporarily</span> <span class="nx">changing</span> <span class="nx">some</span> <span class="nx">use</span> <span class="nx">flag</span> <span class="k">for</span> <span class="nx">all</span> <span class="nx">packages</span> <span class="nx">might</span> <span class="nx">be</span> <span class="nx">the</span> <span class="nx">better</span> <span class="nx">option</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>解决方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 首先打破循环依赖，-1(oneshot) 避免把包写入 world 文件</span>
</span></span><span class="line"><span class="cl"><span class="nv">USE</span><span class="o">=</span><span class="s2">&#34;-pulseaudio&#34;</span> emerge -1 media-sound/mpg123
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 polybar，Global USE 定义了 pulseaudio</span>
</span></span><span class="line"><span class="cl">emerge polybar
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 成功安装后，再恢复以前的状态</span>
</span></span><span class="line"><span class="cl"><span class="nv">USE</span><span class="o">=</span><span class="s2">&#34;pulseaudio&#34;</span> emerge -1 media-sound/mpg123
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<hr>
<hr>
<p><strong>由于日常维护和debug太耗时，目前已放弃 Gentoo，此文章结束</strong></p>
]]></description>
</item>
</channel>
</rss>
