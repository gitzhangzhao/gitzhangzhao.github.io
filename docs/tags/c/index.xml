<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C - 标签 - 张昭的Blog</title>
        <link>http://gitzhangzhao.github.io/tags/c/</link>
        <description>C - 标签 - 张昭的Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>gitzhangzhao@gmail.com (张昭)</managingEditor>
            <webMaster>gitzhangzhao@gmail.com (张昭)</webMaster><lastBuildDate>Fri, 01 Sep 2023 14:38:28 &#43;0800</lastBuildDate><atom:link href="http://gitzhangzhao.github.io/tags/c/" rel="self" type="application/rss+xml" /><item>
    <title>对 C 语言中 extern 的理解</title>
    <link>http://gitzhangzhao.github.io/posts/c/extern/</link>
    <pubDate>Fri, 01 Sep 2023 14:38:28 &#43;0800</pubDate><author>gitzhangzhao@gmail.com (张昭)</author><guid>http://gitzhangzhao.github.io/posts/c/extern/</guid>
    <description><![CDATA[<p><strong>extern 告诉编译器，变量 i 是在程序中的其他位置定义的（很可能是在不同的源文件中），因此不需要为 i 分配空间</strong></p>
<p>一个全局变量可以声明多次，但只能定义一次。只要在任意一个文件中只定义一次就可以了，其他文件中如果要使用需要先用 extern 声明。如果其他文件中没有使用 extern 声明，则会报重复定义的错误</p>
<p><strong>注意</strong>：<code>extern int a</code>是声明而<code>extern int a = 0</code>是定义，要分清楚</p>
<p>在多文件的工程中，有如下几种用法（假设 A 包含源文件和头文件，B 和 C 包含源文件，B 和 C 要使用 A 中定义的变量 a）：</p>
<h4 id="a-的源文件中定义b-和-c-的源文件中使用前先-extern此时可以没有头文件">A 的源文件中定义，B 和 C 的源文件中使用前先 extern，此时可以没有头文件</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// A.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="cm">/* 可以赋值也可以不赋值 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B.c &amp; C.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>  <span class="cm">/* 不可以直接 extern int a = 1，这相当于重复定义 */</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="a-的源文件中定义头文件中声明b-和-c-通过包含-a-的头文件使用">A 的源文件中定义，头文件中声明，B 和 C 通过包含 A 的头文件使用</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// A.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="cm">/* 可以赋值也可以不赋值 */</span>
</span></span><span class="line"><span class="cl"><span class="c1">// A.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>  <span class="cm">/* 不推荐直接在头文件中进行定义 extern int a = 0，别的文件包含后会重复定义 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B.c &amp; C.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;A.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="a-的源文件中未定义只声明在-b-和-c-任意中定义">A 的源文件中未定义只声明，在 B 和 C 任意中定义</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// A.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span><span class="p">;</span>        <span class="cm">/* A 中声明 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// B.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>           <span class="cm">/* B 中定义 */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// C.c
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">extern</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    <span class="cm">/* C 中声明 */</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>总之，C 语言的全局变量是所有文件均可见的，extern 只是告诉了编译器这个变量不是在该文件中定义的。在整个工程中，一个全局变量只能被定义一次，被声明和使用无数次。在非全局作用域下，可以定义同名的变量，这就涉及到作用域的问题</p>
]]></description>
</item>
</channel>
</rss>
